{"version":3,"sources":["fair-launch.ts","candy-machine.ts","connection.tsx","utils.ts","Home.tsx","countdown.tsx","confetti.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LotteryState","FAIR_LAUNCH_PROGRAM","anchor","PublicKey","getFairLaunchState","anchorWallet","fairLaunchId","connection","a","provider","preflightCommitment","idl","flidl","console","log","Map","set","default","program","account","fairLaunch","fetch","state","getFairLaunchTicket","tokenMint","publicKey","fairLaunchTicket","bump","fairLaunchData","getBalance","treasury","lotteryData","Uint8Array","getFairLaunchLotteryBitmap","fairLaunchLotteryBitmap","getAccountInfo","fairLaunchLotteryBitmapObj","data","id","ticket","pubkey","lottery","punchTicket","getAtaForMint","buyerTokenAccount","amount","gt","currentMedian","toNumber","getSetupForTicketing","remainingAccounts","instructions","signers","rpc","adjustTicket","accounts","systemProgram","SystemProgram","programId","clock","SYSVAR_CLOCK_PUBKEY","__private","logAccounts","length","undefined","isSigner","isWritable","accountExists","createAssociatedTokenAccountInstruction","payer","tokenProgram","TOKEN_PROGRAM_ID","buyer","findProgramAddress","Buffer","from","toBuffer","anchorProgram","ticketKey","amountLamports","treasuryMint","Math","ceil","LAMPORTS_PER_SOL","priceRangeStart","transferAuthority","Keypair","generate","push","Token","createApproveInstruction","amountNumber","fees","getFairLaunchTicketSeqLookup","seq","fairLaunchTicketSeqLookup","seqBump","instruction","createTicketSeq","rent","SYSVAR_RENT_PUBKEY","receiveRefund","toBase58","purchaseTicket","CANDY_MACHINE_PROGRAM","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","associatedTokenAddress","walletAddress","splTokenMintAddress","keys","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","getCandyMachineState","candyMachineId","fetchIdl","candyMachine","itemsAvailable","itemsRedeemed","itemsRemaining","isSoldOut","isActive","goLiveDate","Date","getTime","wallet","config","price","getMasterEdition","mint","getMetadata","mintOneToken","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","createInitMintInstruction","createMintToInstruction","metadataAddress","masterEdition","mintNft","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","sendTransactionWithRetry","ms","SequenceType","commitment","includesFeePayer","block","beforeSend","WalletNotConnectedError","transaction","Transaction","forEach","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","map","s","partialSign","signTransaction","sendSignedTransaction","signedTransaction","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","i","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","FAIR_LAUNCH_PROGRAM_ID","toDate","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","toArrayLike","Phase","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","PhaseCountdown","date","start","end","onComplete","classes","useState","now","isFixed","renderCountdown","days","hours","minutes","seconds","completed","className","Paper","elevation","renderer","ConnectButton","styled","WalletDialogButton","MintContainer","div","MintButton","Button","dialogStyles","closeButton","position","right","top","palette","grey","ValueSlider","Slider","border","marginTop","boxShadow","lineHeight","marginLeft","Header","props","phaseName","desc","Grid","container","xs","direction","Typography","variant","isWinner","fairLaunchBalance","phaseThreeStarted","myByte","floor","positionFromRight","pow","Home","setFairLaunchBalance","yourSOLBalance","setYourSOLBalance","isMinting","setIsMinting","contributed","setContributed","useWallet","useMemo","signAllTransactions","open","severity","alertState","setAlertState","setFairLaunch","setCandyMachine","howToOpen","setHowToOpen","refundExplainerOpen","setRefundExplainerOpen","antiRugPolicyOpen","setAnitRugPolicyOpen","onMint","connected","unpunched","onPunchTicket","mintTxId","txTimeout","msg","code","window","location","reload","indexOf","useEffect","balance","getTokenAccountBalance","uiAmount","cndy","min","max","priceRangeEnd","step","tickSize","median","marks","label","filter","_","onDeposit","onRugRefund","onRefundTicket","phase","curr","phaseOne","phaseOneStart","phaseOneEnd","phaseTwoEnd","candyMachineGoLive","Phase0","Phase1","Phase2","Phase4","Phase3","Unknown","Lottery","getPhase","candyMachinePredatesFairLaunch","lt","notEnoughSOL","fee","Container","maxWidth","Link","component","align","onClick","backgroundColor","lotteryDuration","marginBottom","includes","withdrawn","paddingTop","Alert","onChange","ev","valueLabelDisplay","disabled","CircularProgress","punched","Dialog","onClose","PaperProps","antiRugSetting","selfDestructDate","reserveBp","tokenRequirement","numberOfTokens","toLocaleDateString","toLocaleTimeString","textAlign","disableTypography","IconButton","gutterBottom","toLocaleString","wrap","md","numberTicketsSold","Snackbar","autoHideDuration","ConfettiContext","React","createContext","ConfettiProvider","children","canvasRef","useRef","confettiRef","dropConfetti","current","visibility","particleCount","spread","origin","y","finally","confetti","create","resize","useWorker","Provider","ref","zIndex","left","createTheme","type","process","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","ThemeProvider","autoConnect","startDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e0e45a2.chunk.js","sourcesContent":["// @ts-nocheck\nimport * as anchor from '@project-serum/anchor';\nimport * as flidl from './idl.json';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { Idl } from \"./idl\";\nimport { LAMPORTS_PER_SOL, TransactionInstruction } from '@solana/web3.js';\nimport {\n  createAssociatedTokenAccountInstruction,\n  getAtaForMint,\n  getFairLaunchTicketSeqLookup,\n} from './utils';\n\nexport const FAIR_LAUNCH_PROGRAM = new anchor.web3.PublicKey(\n  'DGjTcPhTDjk3JTE1YsvqHMxAtFZbMygJcYRee3hzcfwS',\n);\n\nexport interface FairLaunchAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: FairLaunchState;\n\n  ticket: {\n    pubkey: anchor.web3.PublicKey;\n    bump: number;\n    data?: FairLaunchTicket;\n  };\n  lottery: {\n    pubkey: anchor.web3.PublicKey;\n    data?: Uint8Array;\n  };\n  treasury: number;\n}\n\nexport interface FairLaunchTicket {\n  fairLaunch: anchor.web3.PublicKey;\n  buyer: anchor.web3.PublicKey;\n  amount: anchor.BN;\n  state: {\n    punched?: {};\n    unpunched?: {};\n    withdrawn?: {};\n    no_sequence_struct: {};\n  };\n  bump: number;\n  seq: anchor.BN;\n}\n\nexport interface AntiRugSetting {\n  reserveBp: number;\n  tokenRequirement: anchor.BN;\n  selfDestructDate: anchor.BN;\n}\nexport interface FairLaunchState {\n  authority: anchor.web3.PublicKey;\n  bump: number;\n\n  currentMedian: anchor.BN;\n  currentEligibleHolders: anchor.BN;\n  data: {\n    antiRugSetting?: AntiRugSetting;\n    fee: anchor.BN;\n    numberOfTokens: anchor.BN;\n    phaseOneEnd: anchor.BN;\n    phaseOneStart: anchor.BN;\n    phaseTwoEnd: anchor.BN;\n    priceRangeEnd: anchor.BN;\n    priceRangeStart: anchor.BN;\n    lotteryDuration: anchor.BN;\n    tickSize: anchor.BN;\n    uuid: string;\n  };\n  numberTicketsDropped: anchor.BN;\n  numberTicketsPunched: anchor.BN;\n  numberTicketsSold: anchor.BN;\n  numberTicketsUnSeqed: anchor.BN;\n  numberTokensBurnedForRefunds: anchor.BN;\n  numberTokensPreminted: anchor.BN;\n  phaseThreeStarted: boolean;\n  tokenMint: anchor.web3.PublicKey;\n  tokenMintBump: number;\n  treasury: anchor.web3.PublicKey;\n  treasuryBump: number;\n  treasuryMint: anchor.web3.PublicKey; // only for SPL tokens\n  treasurySnapshot: null;\n}\n\nexport enum LotteryState {\n  Brewing = 'Brewing',\n  Finished = 'Finished',\n  PastDue = 'Past Due',\n}\n\nexport const getLotteryState = (\n  phaseThree: boolean | undefined,\n  lottery: Uint8Array | null,\n  lotteryDuration: anchor.BN,\n  phaseTwoEnd: anchor.BN,\n): LotteryState => {\n  if (\n    !phaseThree &&\n    (!lottery || lottery.length === 0) &&\n    phaseTwoEnd.add(lotteryDuration).lt(new anchor.BN(Date.now() / 1000))\n  ) {\n    return LotteryState.PastDue;\n  } else if (phaseThree) {\n    return LotteryState.Finished;\n  } else {\n    return LotteryState.Brewing;\n  }\n};\nexport const getFairLaunchState = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunchId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<FairLaunchAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = (flidl)\nconsole.log(idl)\n        const idlMap = new Map<string, Idl>();\n\n        idlMap.set(idl);\n//await anchor.Program.fetchIdl(, provider);\nconsole.log(idl.default)\n  const program = new anchor.Program(idl.default, FAIR_LAUNCH_PROGRAM, provider);\n  const state: any = await program.account.fairLaunch.fetch(fairLaunchId);\n  const [fairLaunchTicket, bump] = await getFairLaunchTicket(\n    //@ts-ignore\n    state.tokenMint,\n    anchorWallet.publicKey,\n  );\n\n  let fairLaunchData: any;\n\n  try {\n    fairLaunchData = await program.account.fairLaunchTicket.fetch(\n      fairLaunchTicket,\n    );\n  } catch {\n    console.log('No ticket');\n  }\n\n  const treasury = await program.provider.connection.getBalance(state.treasury);\n\n  let lotteryData: Uint8Array = new Uint8Array([]);\n  let fairLaunchLotteryBitmap = (\n    await getFairLaunchLotteryBitmap(\n      //@ts-ignore\n      state.tokenMint,\n    )\n  )[0];\n\n  try {\n    const fairLaunchLotteryBitmapObj =\n      await program.provider.connection.getAccountInfo(fairLaunchLotteryBitmap);\n\n    lotteryData = new Uint8Array(fairLaunchLotteryBitmapObj?.data || []);\n  } catch (e) {\n    console.log('Could not find fair launch lottery.');\n    console.log(e);\n  }\n\n  return {\n    id: fairLaunchId,\n    state,\n    program,\n    ticket: {\n      pubkey: fairLaunchTicket,\n      bump,\n      data: fairLaunchData,\n    },\n    lottery: {\n      pubkey: fairLaunchLotteryBitmap,\n      data: lotteryData,\n    },\n    treasury,\n  };\n};\n\nexport const punchTicket = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount,\n) => {\n  const fairLaunchTicket = (\n    await getFairLaunchTicket(\n      //@ts-ignore\n      fairLaunch.state.tokenMint,\n      anchorWallet.publicKey,\n    )\n  )[0];\n\n  const ticket = fairLaunch.ticket.data;\n\n  const fairLaunchLotteryBitmap = //@ts-ignore\n  (await getFairLaunchLotteryBitmap(fairLaunch.state.tokenMint))[0];\n\n  const buyerTokenAccount = (\n    await getAtaForMint(\n      //@ts-ignore\n      fairLaunch.state.tokenMint,\n      anchorWallet.publicKey,\n    )\n  )[0];\n\n  if (ticket?.amount.gt(fairLaunch.state.currentMedian)) {\n    console.log(\n      'Adjusting down...',\n      ticket?.amount.toNumber(),\n      fairLaunch.state.currentMedian.toNumber(),\n    );\n    const { remainingAccounts, instructions, signers } =\n      await getSetupForTicketing(\n        fairLaunch.program,\n        fairLaunch.state.currentMedian.toNumber(),\n        anchorWallet,\n        fairLaunch,\n        fairLaunchTicket,\n      );\n    await fairLaunch.program.rpc.adjustTicket(fairLaunch.state.currentMedian, {\n      accounts: {\n        fairLaunchTicket,\n        fairLaunch: fairLaunch.id,\n        fairLaunchLotteryBitmap,\n        //@ts-ignore\n        treasury: fairLaunch.state.treasury,\n        systemProgram: anchor.web3.SystemProgram.programId,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      },\n      __private: { logAccounts: true },\n      instructions: instructions.length > 0 ? instructions : undefined,\n      remainingAccounts: [\n        {\n          pubkey: anchorWallet.publicKey,\n          isSigner: true,\n          isWritable: true,\n        },\n        ...remainingAccounts,\n      ],\n      signers,\n    });\n  }\n\n  const accountExists =\n    await fairLaunch.program.provider.connection.getAccountInfo(\n      buyerTokenAccount,\n    );\n\n  const instructions = !accountExists\n    ? [\n        createAssociatedTokenAccountInstruction(\n          buyerTokenAccount,\n          anchorWallet.publicKey,\n          anchorWallet.publicKey,\n          //@ts-ignore\n          fairLaunch.state.tokenMint,\n        ),\n      ]\n    : [];\n\n  await fairLaunch.program.rpc.punchTicket({\n    accounts: {\n      fairLaunchTicket,\n      fairLaunch: fairLaunch.id,\n      fairLaunchLotteryBitmap,\n      payer: anchorWallet.publicKey,\n      buyerTokenAccount,\n      //@ts-ignore\n      tokenMint: fairLaunch.state.tokenMint,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    instructions: instructions.length > 0 ? instructions : undefined,\n  });\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM,\n  );\n};\n\nexport const getFairLaunchLotteryBitmap = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\n    FAIR_LAUNCH_PROGRAM,\n  );\n};\n\nconst getSetupForTicketing = async (\n  anchorProgram: anchor.Program,\n  amount: number,\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n  ticketKey: anchor.web3.PublicKey,\n): Promise<{\n  remainingAccounts: {\n    pubkey: anchor.web3.PublicKey | null;\n    isWritable: boolean;\n    isSigner: boolean;\n  }[];\n  instructions: TransactionInstruction[];\n  signers: anchor.web3.Keypair[];\n  amountLamports: number;\n}> => {\n  if (!fairLaunch) {\n    return {\n      remainingAccounts: [],\n      instructions: [],\n      signers: [],\n      amountLamports: 0,\n    };\n  }\n  const ticket = fairLaunch.ticket;\n\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers = [];\n\n  let amountLamports = 0;\n  //@ts-ignore\n  if (!fairLaunch.state.treasuryMint) {\n    if (!ticket && amount === 0) {\n      amountLamports = fairLaunch.state.data.priceRangeStart.toNumber();\n    } else {\n      amountLamports = Math.ceil(amount * LAMPORTS_PER_SOL);\n    }\n  } else {\n    const transferAuthority = anchor.web3.Keypair.generate();\n    signers.push(transferAuthority);\n    // NOTE this token impl will not work till you get decimal mantissa and multiply...\n    /// ex from cli wont work since you dont have a Signer, but an anchor.Wallet\n    /*\n    const token = new Token(\n        anchorProgram.provider.connection,\n        //@ts-ignore\n        fairLaunchObj.treasuryMint,\n        TOKEN_PROGRAM_ID,\n        walletKeyPair,\n      );\n      const mintInfo = await token.getMintInfo();\n      amountNumber = Math.ceil(amountNumber * 10 ** mintInfo.decimals);\n    */\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        //@ts-ignore\n        fairLaunch.state.treasuryMint,\n        transferAuthority.publicKey,\n        anchorWallet.publicKey,\n        [],\n        //@ts-ignore\n\n        // TODO: get mint decimals\n        amountNumber + fairLaunch.state.data.fees.toNumber(),\n      ),\n    );\n\n    remainingAccounts.push({\n      //@ts-ignore\n      pubkey: fairLaunch.state.treasuryMint,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: (\n        await getAtaForMint(\n          //@ts-ignore\n          fairLaunch.state.treasuryMint,\n          anchorWallet.publicKey,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n    remainingAccounts.push({\n      pubkey: TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    });\n  }\n\n  if (ticket.data) {\n    const [fairLaunchTicketSeqLookup, seqBump] =\n      await getFairLaunchTicketSeqLookup(\n        fairLaunch.state.tokenMint,\n        ticket.data?.seq,\n      );\n\n    const seq = await anchorProgram.provider.connection.getAccountInfo(\n      fairLaunchTicketSeqLookup,\n    );\n    if (!seq) {\n      instructions.push(\n        await anchorProgram.instruction.createTicketSeq(seqBump, {\n          accounts: {\n            fairLaunchTicketSeqLookup,\n            fairLaunch: fairLaunch.id,\n            fairLaunchTicket: ticketKey,\n            payer: anchorWallet.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n            rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          },\n          signers: [],\n        }),\n      );\n    }\n  }\n\n  return {\n    remainingAccounts,\n    instructions,\n    signers,\n    amountLamports,\n  };\n};\n\nexport const receiveRefund = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n) => {\n  if (!fairLaunch) {\n    return;\n  }\n\n  const buyerTokenAccount = (\n    await getAtaForMint(fairLaunch.state.tokenMint, anchorWallet.publicKey)\n  )[0];\n\n  const transferAuthority = anchor.web3.Keypair.generate();\n\n  const signers = [transferAuthority];\n  const instructions = [\n    Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      buyerTokenAccount,\n      transferAuthority.publicKey,\n      anchorWallet.publicKey,\n      [],\n      1,\n    ),\n  ];\n\n  const remainingAccounts = [];\n\n  if (fairLaunch.state.treasuryMint) {\n    remainingAccounts.push({\n      pubkey: fairLaunch.state.treasuryMint,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: (\n        await getAtaForMint(\n          fairLaunch.state.treasuryMint,\n          anchorWallet.publicKey,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n  }\n\n  console.log(\n    'tfr',\n    fairLaunch.state.treasury.toBase58(),\n    anchorWallet.publicKey.toBase58(),\n    buyerTokenAccount.toBase58(),\n  );\n  await fairLaunch.program.rpc.receiveRefund({\n    accounts: {\n      fairLaunch: fairLaunch.id,\n      treasury: fairLaunch.state.treasury,\n      buyer: anchorWallet.publicKey,\n      buyerTokenAccount,\n      transferAuthority: transferAuthority.publicKey,\n      tokenMint: fairLaunch.state.tokenMint,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n\n    __private: { logAccounts: true },\n    remainingAccounts,\n    instructions,\n    signers,\n  });\n};\nexport const purchaseTicket = async (\n  amount: number,\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n) => {\n  if (!fairLaunch) {\n    return;\n  }\n\n  const ticket = fairLaunch.ticket.data;\n\n  const [fairLaunchTicket, bump] = await getFairLaunchTicket(\n    //@ts-ignore\n    fairLaunch.state.tokenMint,\n    anchorWallet.publicKey,\n  );\n\n  const { remainingAccounts, instructions, signers, amountLamports } =\n    await getSetupForTicketing(\n      fairLaunch.program,\n      amount,\n      anchorWallet,\n      fairLaunch,\n      fairLaunchTicket,\n    );\n\n  if (ticket) {\n    const fairLaunchLotteryBitmap = ( //@ts-ignore\n      await getFairLaunchLotteryBitmap(fairLaunch.state.tokenMint)\n    )[0];\n    console.log(\n      'Anchor wallet',\n      anchorWallet.publicKey.toBase58(),\n      amountLamports,\n    );\n    await fairLaunch.program.rpc.adjustTicket(new anchor.BN(amountLamports), {\n      accounts: {\n        fairLaunchTicket,\n        fairLaunch: fairLaunch.id,\n        fairLaunchLotteryBitmap,\n        //@ts-ignore\n        treasury: fairLaunch.state.treasury,\n        systemProgram: anchor.web3.SystemProgram.programId,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      },\n      __private: { logAccounts: true },\n      remainingAccounts: [\n        {\n          pubkey: anchorWallet.publicKey,\n          isSigner: true,\n          isWritable: true,\n        },\n        ...remainingAccounts,\n      ],\n      signers,\n      instructions: instructions.length > 0 ? instructions : undefined,\n    });\n\n    return;\n  }\n  try {\n    console.log('Amount', amountLamports);\n    await fairLaunch.program.rpc.purchaseTicket(\n      bump,\n      new anchor.BN(amountLamports),\n      {\n        accounts: {\n          fairLaunchTicket,\n          fairLaunch: fairLaunch.id,\n          //@ts-ignore\n          treasury: fairLaunch.state.treasury,\n          buyer: anchorWallet.publicKey,\n          payer: anchorWallet.publicKey,\n          systemProgram: anchor.web3.SystemProgram.programId,\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        },\n        //__private: { logAccounts: true },\n        remainingAccounts,\n        signers,\n        instructions: instructions.length > 0 ? instructions : undefined,\n      },\n    );\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n};\n\nexport const withdrawFunds = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n) => {\n  if (!fairLaunch) {\n    return;\n  }\n\n  // TODO: create sequence ticket\n\n  const remainingAccounts = [];\n\n  //@ts-ignore\n  if (fairLaunch.state.treasuryMint) {\n    remainingAccounts.push({\n      //@ts-ignore\n      pubkey: fairLaunch.state.treasuryMint,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: (\n        await getAtaForMint(\n          //@ts-ignore\n          fairLaunch.state.treasuryMint,\n          anchorWallet.publicKey,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    });\n  }\n\n  await fairLaunch.program.rpc.withdrawFunds({\n    accounts: {\n      fairLaunch: fairLaunch.id,\n      // @ts-ignore\n      treasury: fairLaunch.state.treasury,\n      authority: anchorWallet.publicKey,\n      // @ts-ignore\n      tokenMint: fairLaunch.state.tokenMint,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    },\n    remainingAccounts,\n  });\n};\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactionWithRetry } from './connection';\n\nimport {\n  getAtaForMint,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  config: anchor.web3.PublicKey;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: state.data.goLiveDate.toNumber() < new Date().getTime() / 1000,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      config: state.config,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = (\n    await getAtaForMint(candyMachine.state.tokenMint, payer)\n  )[0];\n\n  const candyMachineAddress = candyMachine.id;\n\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  let tokenAccount;\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft({\n      accounts: {\n        config: candyMachine.state.config,\n        candyMachine: candyMachineAddress,\n        payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  if (tokenAccount) {\n    instructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  try {\n    return (\n      await sendTransactionWithRetry(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructions,\n        signers,\n      )\n    ).txid;\n  } catch (e) {\n    console.log(e);\n  }\n  return 'j';\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport {\n  WalletNotConnectedError,\n} from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        stopPoint = 1;\n      } else {\n        stopPoint = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<number> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          return breakEarlyObject.i; // Return the txn we failed on by index\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return signedTxns.length;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey(\n  'DGjTcPhTDjk3JTE1YsvqHMxAtFZbMygJcYRee3hzcfwS',\n);\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      tokenMint.toBuffer(),\n      seq.toArrayLike(Buffer, 'le', 8),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  CircularProgress,\n  Container,\n  IconButton,\n  Link,\n  Slider,\n  Snackbar,\n} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, Theme } from '@material-ui/core/styles';\nimport { PhaseCountdown } from './countdown';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport * as anchor from '@project-serum/anchor';\n\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  getCandyMachineState,\n  mintOneToken,\n} from './candy-machine';\n\nimport {\n  FairLaunchAccount,\n  getFairLaunchState,\n  punchTicket,\n  purchaseTicket,\n  receiveRefund,\n} from './fair-launch';\n\nimport { formatNumber, getAtaForMint, toDate } from './utils';\nimport Countdown from 'react-countdown';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your styles here\n\nconst dialogStyles: any = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nconst ValueSlider = styled(Slider)({\n  color: '#C0D5FE',\n  height: 8,\n  '& > *': {\n    height: 4,\n  },\n  '& .MuiSlider-track': {\n    border: 'none',\n    height: 4,\n  },\n  '& .MuiSlider-thumb': {\n    height: 24,\n    width: 24,\n    marginTop: -10,\n    background: 'linear-gradient(180deg, #604AE5 0%, #813EEE 100%)',\n    border: '2px solid currentColor',\n    '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n      boxShadow: 'inherit',\n    },\n    '&:before': {\n      display: 'none',\n    },\n  },\n  '& .MuiSlider-valueLabel': {\n    '& > *': {\n      background: 'linear-gradient(180deg, #604AE5 0%, #813EEE 100%)',\n    },\n    lineHeight: 1.2,\n    fontSize: 12,\n    padding: 0,\n    width: 32,\n    height: 32,\n    marginLeft: 9,\n  },\n});\n\nenum Phase {\n  Phase0,\n  Phase1,\n  Phase2,\n  Lottery,\n  Phase3,\n  Phase4,\n  Unknown,\n}\n\nconst Header = (props: {\n  phaseName: string;\n  desc: string;\n  date: anchor.BN | undefined;\n  status?: string;\n}) => {\n  const { phaseName, desc, date, status } = props;\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid xs={6} justifyContent=\"center\" direction=\"column\">\n        <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\n          {phaseName}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          {desc}\n        </Typography>\n      </Grid>\n      <Grid xs={6} container justifyContent=\"flex-end\">\n        <PhaseCountdown\n          date={toDate(date)}\n          style={{ justifyContent: 'flex-end' }}\n          status={status || 'COMPLETE'}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nfunction getPhase(\n  fairLaunch: FairLaunchAccount | undefined,\n  candyMachine: CandyMachineAccount | undefined,\n): Phase {\n  const curr = new Date().getTime();\n\n  const phaseOne = toDate(fairLaunch?.state.data.phaseOneStart)?.getTime();\n  const phaseOneEnd = toDate(fairLaunch?.state.data.phaseOneEnd)?.getTime();\n  const phaseTwoEnd = toDate(fairLaunch?.state.data.phaseTwoEnd)?.getTime();\n  const candyMachineGoLive = toDate(candyMachine?.state.goLiveDate)?.getTime();\n\n  if (phaseOne && curr < phaseOne) {\n    return Phase.Phase0;\n  } else if (phaseOneEnd && curr <= phaseOneEnd) {\n    return Phase.Phase1;\n  } else if (phaseTwoEnd && curr <= phaseTwoEnd) {\n    return Phase.Phase2;\n  } else if (!fairLaunch?.state.phaseThreeStarted) {\n    return Phase.Lottery;\n  } else if (\n    fairLaunch?.state.phaseThreeStarted &&\n    candyMachineGoLive &&\n    curr > candyMachineGoLive\n  ) {\n    return Phase.Phase4;\n  } else if (fairLaunch?.state.phaseThreeStarted) {\n    return Phase.Phase3;\n  }\n\n  return Phase.Unknown;\n}\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  fairLaunchId: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n}\n\nconst FAIR_LAUNCH_LOTTERY_SIZE =\n  8 + // discriminator\n  32 + // fair launch\n  1 + // bump\n  8; // size of bitmask ones\n\nconst isWinner = (\n  fairLaunch: FairLaunchAccount | undefined,\n  fairLaunchBalance: number,\n): boolean => {\n  if (fairLaunchBalance > 0) return true;\n  if (\n    !fairLaunch?.lottery.data ||\n    !fairLaunch?.lottery.data.length ||\n    !fairLaunch?.ticket.data?.seq ||\n    !fairLaunch?.state.phaseThreeStarted\n  ) {\n    return false;\n  }\n\n  const myByte =\n    fairLaunch.lottery.data[\n      FAIR_LAUNCH_LOTTERY_SIZE +\n        Math.floor(fairLaunch.ticket.data?.seq.toNumber() / 8)\n    ];\n\n  const positionFromRight = 7 - (fairLaunch.ticket.data?.seq.toNumber() % 8);\n  const mask = Math.pow(2, positionFromRight);\n  const isWinner = myByte & mask;\n  return isWinner > 0;\n};\n\nconst Home = (props: HomeProps) => {\n  const [fairLaunchBalance, setFairLaunchBalance] = useState<number>(0);\n  const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\n\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [contributed, setContributed] = useState(0);\n\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n\n  const [fairLaunch, setFairLaunch] = useState<FairLaunchAccount>();\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [howToOpen, setHowToOpen] = useState(false);\n  const [refundExplainerOpen, setRefundExplainerOpen] = useState(false);\n  const [antiRugPolicyOpen, setAnitRugPolicyOpen] = useState(false);\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        if (\n          fairLaunch?.ticket.data?.state.unpunched &&\n          isWinner(fairLaunch, fairLaunchBalance)\n        ) {\n          await onPunchTicket();\n        }\n\n        const mintTxId = await mintOneToken(candyMachine, wallet.publicKey);\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          'singleGossip',\n          false,\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      try {\n        const balance = await props.connection.getBalance(\n          anchorWallet.publicKey,\n        );\n        setYourSOLBalance(balance);\n\n        const state = await getFairLaunchState(\n          anchorWallet,\n          props.fairLaunchId,\n          props.connection,\n        );\n\n        setFairLaunch(state);\n\n        try {\n          if (state.state.tokenMint) {\n            const fairLaunchBalance =\n              await props.connection.getTokenAccountBalance(\n                (\n                  await getAtaForMint(\n                    state.state.tokenMint,\n                    anchorWallet.publicKey,\n                  )\n                )[0],\n              );\n\n            if (fairLaunchBalance.value) {\n              setFairLaunchBalance(fairLaunchBalance.value.uiAmount || 0);\n            }\n          }\n        } catch (e) {\n          console.log('Problem getting fair launch token balance');\n          console.log(e);\n        }\n        setContributed(\n          (\n            state.state.currentMedian || state.state.data.priceRangeStart\n          ).toNumber() / LAMPORTS_PER_SOL,\n        );\n      } catch (e) {\n        console.log('Problem getting fair launch state');\n        console.log(e);\n      }\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            props.connection,\n          );\n          setCandyMachine(cndy);\n        } catch (e) {\n          console.log('Problem getting candy machine state');\n          console.log(e);\n        }\n      } else {\n        console.log('No candy machine detected in configuration.');\n      }\n    })();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    props.fairLaunchId,\n  ]);\n\n  const min = formatNumber.asNumber(fairLaunch?.state.data.priceRangeStart);\n  const max = formatNumber.asNumber(fairLaunch?.state.data.priceRangeEnd);\n  const step = formatNumber.asNumber(fairLaunch?.state.data.tickSize);\n  const median = formatNumber.asNumber(fairLaunch?.state.currentMedian);\n  const marks = [\n    {\n      value: min || 0,\n      label: `${min} SOL`,\n    },\n    // TODO:L\n    {\n      value: median || 0,\n      label: `${median}`,\n    },\n    // display user comitted value\n    // {\n    //   value: 37,\n    //   label: '37°C',\n    // },\n    {\n      value: max || 0,\n      label: `${max} SOL`,\n    },\n  ].filter(_ => _ !== undefined && _.value !== 0) as any;\n\n  const onDeposit = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    console.log('deposit');\n    setIsMinting(true);\n    try {\n      await purchaseTicket(contributed, anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: `Congratulations! Bid ${\n          fairLaunch?.ticket.data ? 'updated' : 'inserted'\n        }!`,\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n  const onRugRefund = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    console.log('refund');\n    try {\n      setIsMinting(true);\n      await receiveRefund(anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message:\n          'Congratulations! You have received a refund. This is an irreversible action.',\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n  const onRefundTicket = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    console.log('refund');\n    try {\n      setIsMinting(true);\n      await purchaseTicket(0, anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message:\n          'Congratulations! Funds withdrawn. This is an irreversible action.',\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n\n  const onPunchTicket = async () => {\n    if (!anchorWallet || !fairLaunch || !fairLaunch.ticket) {\n      return;\n    }\n\n    console.log('punch');\n    setIsMinting(true);\n    try {\n      await punchTicket(anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Congratulations! Ticket punched!',\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n\n  const phase = getPhase(fairLaunch, candyMachine);\n\n  const candyMachinePredatesFairLaunch =\n    candyMachine?.state.goLiveDate &&\n    fairLaunch?.state.data.phaseTwoEnd &&\n    candyMachine?.state.goLiveDate.lt(fairLaunch?.state.data.phaseTwoEnd);\n\n  const notEnoughSOL = !!(\n    yourSOLBalance != null &&\n    fairLaunch?.state.data.priceRangeStart &&\n    fairLaunch?.state.data.fee &&\n    yourSOLBalance + (fairLaunch?.ticket?.data?.amount.toNumber() || 0) <\n      contributed * LAMPORTS_PER_SOL +\n        fairLaunch?.state.data.fee.toNumber() +\n        0.01\n  );\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Link\n            component=\"button\"\n            variant=\"body2\"\n            color=\"textSecondary\"\n            align=\"right\"\n            onClick={() => {\n              setAnitRugPolicyOpen(true);\n            }}\n          >\n            Anti-Rug Policy\n          </Link>\n        </div>\n      </Container>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\n        >\n          <Grid container justifyContent=\"center\" direction=\"column\">\n            {phase === Phase.Phase0 && (\n              <Header\n                phaseName={'Phase 0'}\n                desc={'Anticipation Phase'}\n                date={fairLaunch?.state.data.phaseOneStart}\n              />\n            )}\n            {phase === Phase.Phase1 && (\n              <Header\n                phaseName={'Phase 1'}\n                desc={'Set price phase'}\n                date={fairLaunch?.state.data.phaseOneEnd}\n              />\n            )}\n\n            {phase === Phase.Phase2 && (\n              <Header\n                phaseName={'Phase 2'}\n                desc={'Grace period'}\n                date={fairLaunch?.state.data.phaseTwoEnd}\n              />\n            )}\n\n            {phase === Phase.Lottery && (\n              <Header\n                phaseName={'Phase 3'}\n                desc={'Raffle in progress'}\n                date={fairLaunch?.state.data.phaseTwoEnd.add(\n                  fairLaunch?.state.data.lotteryDuration,\n                )}\n              />\n            )}\n\n            {phase === Phase.Phase3 && !candyMachine && (\n              <Header\n                phaseName={'Phase 3'}\n                desc={'Raffle finished!'}\n                date={fairLaunch?.state.data.phaseTwoEnd}\n              />\n            )}\n\n            {phase === Phase.Phase3 && candyMachine && (\n              <Header\n                phaseName={'Phase 3'}\n                desc={'Minting starts in...'}\n                date={candyMachine?.state.goLiveDate}\n              />\n            )}\n\n            {phase === Phase.Phase4 && (\n              <Header\n                phaseName={\n                  candyMachinePredatesFairLaunch ? 'Phase 3' : 'Phase 4'\n                }\n                desc={'Candy Time 🍬 🍬 🍬'}\n                date={candyMachine?.state.goLiveDate}\n                status=\"LIVE\"\n              />\n            )}\n\n            {fairLaunch && (\n              <Grid\n                container\n                direction=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                style={{\n                  height: 200,\n                  marginTop: 20,\n                  marginBottom: 20,\n                  background: '#384457',\n                  borderRadius: 6,\n                }}\n              >\n                {fairLaunch.ticket.data ? (\n                  <>\n                    <Typography>Your bid</Typography>\n                    <Typography variant=\"h6\" style={{ fontWeight: 900 }}>\n                      {formatNumber.format(\n                        (fairLaunch?.ticket.data?.amount.toNumber() || 0) /\n                          LAMPORTS_PER_SOL,\n                      )}{' '}\n                      SOL\n                    </Typography>\n                  </>\n                ) : [Phase.Phase0, Phase.Phase1].includes(phase) ? (\n                  <Typography>\n                    The last person to bid wins the honeypot. <br />\n                    DYOR https://github.com/dunncreativess/fair3d - run 'show' command in cli to see updated authority ;).<br />\n                    The counter resets every time some new address bids. <br />\n                    This isn't necessarily what @redacted_j had in mind. <br />\n                    \n                  </Typography>\n                ) : (\n                  <Typography>\n                    You didn't participate in this raffle.\n                  </Typography>\n                )}\n              </Grid>\n            )}\n\n            {fairLaunch && (\n              <>\n                {[\n                  Phase.Phase1,\n                  Phase.Phase2,\n                  Phase.Phase3,\n                  Phase.Lottery,\n                ].includes(phase) &&\n                  fairLaunch?.ticket?.data?.state.withdrawn && (\n                    <div style={{ paddingTop: '15px' }}>\n                      <Alert severity=\"error\">\n                        Your bid was withdrawn and cannot be adjusted or\n                        re-inserted.\n                      </Alert>\n                    </div>\n                  )}\n                {[Phase.Phase1, Phase.Phase2].includes(phase) &&\n                  fairLaunch.state.currentMedian &&\n                  fairLaunch?.ticket?.data?.amount &&\n                  !fairLaunch?.ticket?.data?.state.withdrawn &&\n                  fairLaunch.state.currentMedian.gt(\n                    fairLaunch?.ticket?.data?.amount,\n                  ) && (\n                    <div style={{ paddingTop: '15px' }}>\n                      <Alert severity=\"warning\">\n                        Your bid is currently below the median and will not be\n                        eligible for the raffle.\n                      </Alert>\n                    </div>\n                  )}\n                {[Phase.Phase3, Phase.Lottery].includes(phase) &&\n                  fairLaunch.state.currentMedian &&\n                  fairLaunch?.ticket?.data?.amount &&\n                  !fairLaunch?.ticket?.data?.state.withdrawn &&\n                  fairLaunch.state.currentMedian.gt(\n                    fairLaunch?.ticket?.data?.amount,\n                  ) && (\n                    <div style={{ paddingTop: '15px' }}>\n                      <Alert severity=\"error\">\n                        Your bid was below the median and was not included in\n                        the raffle. You may click <em>Withdraw</em> when the\n                        raffle ends or you will be automatically issued one when\n                        the Fair Launch authority withdraws from the treasury.\n                      </Alert>\n                    </div>\n                  )}\n                {notEnoughSOL && (\n                  <Alert severity=\"error\">\n                    You do not have enough SOL in your account to place this\n                    bid.\n                  </Alert>\n                )}\n              </>\n            )}\n\n            {[Phase.Phase1, Phase.Phase2].includes(phase) && (\n              <>\n                <Grid style={{ marginTop: 40, marginBottom: 20 }}>\n                  <ValueSlider\n                    min={min}\n                    marks={marks}\n                    max={max}\n                    step={step}\n                    value={contributed}\n                    onChange={(ev, val) => setContributed(val as any)}\n                    valueLabelDisplay=\"auto\"\n                    style={{\n                      width: 'calc(100% - 40px)',\n                      marginLeft: 20,\n                      height: 30,\n                    }}\n                  />\n                </Grid>\n              </>\n            )}\n\n            {!wallet.connected ? (\n              <ConnectButton>\n                Connect{' '}\n                {[Phase.Phase1].includes(phase) ? 'to bid' : 'to see status'}\n              </ConnectButton>\n            ) : (\n              <div>\n                {[Phase.Phase1, Phase.Phase2].includes(phase) && (\n                  <>\n                    <MintButton\n                      onClick={onDeposit}\n                      variant=\"contained\"\n                      disabled={\n                        isMinting ||\n                        (!fairLaunch?.ticket.data && phase === Phase.Phase2) ||\n                        notEnoughSOL\n                      }\n                    >\n                      {isMinting ? (\n                        <CircularProgress />\n                      ) : !fairLaunch?.ticket.data ? (\n                        'Place bid'\n                      ) : (\n                        'Change bid'\n                      )}\n                      {}\n                    </MintButton>\n                  </>\n                )}\n\n                {[Phase.Phase3].includes(phase) && (\n                  <>\n                    {isWinner(fairLaunch, fairLaunchBalance) && (\n                      <MintButton\n                        onClick={onPunchTicket}\n                        variant=\"contained\"\n                        disabled={\n                          fairLaunch?.ticket.data?.state.punched !== undefined\n                        }\n                      >\n                        {isMinting ? <CircularProgress /> : 'Punch Ticket'}\n                      </MintButton>\n                    )}\n\n                    {!isWinner(fairLaunch, fairLaunchBalance) && (\n                      <MintButton\n                        onClick={onRefundTicket}\n                        variant=\"contained\"\n                        disabled={\n                          isMinting ||\n                          fairLaunch?.ticket.data === undefined ||\n                          fairLaunch?.ticket.data?.state.withdrawn !== undefined\n                        }\n                      >\n                        {isMinting ? <CircularProgress /> : 'Withdraw'}\n                      </MintButton>\n                    )}\n                  </>\n                )}\n\n                {phase === Phase.Phase4 && (\n                  <>\n                    {(!fairLaunch ||\n                      isWinner(fairLaunch, fairLaunchBalance)) && (\n                      <MintContainer>\n                        <MintButton\n                          disabled={\n                            candyMachine?.state.isSoldOut ||\n                            isMinting ||\n                            !candyMachine?.state.isActive ||\n                            (fairLaunch?.ticket?.data?.state.punched &&\n                              fairLaunchBalance === 0)\n                          }\n                          onClick={onMint}\n                          variant=\"contained\"\n                        >\n                          {fairLaunch?.ticket?.data?.state.punched &&\n                          fairLaunchBalance === 0 ? (\n                            'MINTED'\n                          ) : candyMachine?.state.isSoldOut ? (\n                            'SOLD OUT'\n                          ) : isMinting ? (\n                            <CircularProgress />\n                          ) : (\n                            'MINT'\n                          )}\n                        </MintButton>\n                      </MintContainer>\n                    )}\n\n                    {!isWinner(fairLaunch, fairLaunchBalance) && (\n                      <MintButton\n                        onClick={onRefundTicket}\n                        variant=\"contained\"\n                        disabled={\n                          isMinting ||\n                          fairLaunch?.ticket.data === undefined ||\n                          fairLaunch?.ticket.data?.state.withdrawn !== undefined\n                        }\n                      >\n                        {isMinting ? <CircularProgress /> : 'Withdraw'}\n                      </MintButton>\n                    )}\n                  </>\n                )}\n              </div>\n            )}\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              color=\"textSecondary\"\n            >\n              <Link\n                component=\"button\"\n                variant=\"body2\"\n                color=\"textSecondary\"\n                align=\"left\"\n                onClick={() => {\n                  setHowToOpen(true);\n                }}\n              >\n                How this raffle works\n              </Link>\n              {fairLaunch?.ticket.data && (\n                <Link\n                  component=\"button\"\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  align=\"right\"\n                  onClick={() => {\n                    if (\n                      !fairLaunch ||\n                      phase === Phase.Lottery ||\n                      isWinner(fairLaunch, fairLaunchBalance)\n                    ) {\n                      setRefundExplainerOpen(true);\n                    } else {\n                      onRefundTicket();\n                    }\n                  }}\n                >\n                  Withdraw funds\n                </Link>\n              )}\n            </Grid>\n            <Dialog\n              open={refundExplainerOpen}\n              onClose={() => setRefundExplainerOpen(false)}\n              PaperProps={{\n                style: { backgroundColor: '#222933', borderRadius: 6 },\n              }}\n            >\n              <MuiDialogContent style={{ padding: 24 }}>\n                During raffle phases, or if you are a winner, or if this website\n                is not configured to be a fair launch but simply a candy\n                machine, refunds are disallowed.\n              </MuiDialogContent>\n            </Dialog>\n            <Dialog\n              open={antiRugPolicyOpen}\n              onClose={() => {\n                setAnitRugPolicyOpen(false);\n              }}\n              PaperProps={{\n                style: { backgroundColor: '#222933', borderRadius: 6 },\n              }}\n            >\n              <MuiDialogContent style={{ padding: 24 }}>\n                {!fairLaunch?.state.data.antiRugSetting && (\n                  <span>This Fair Launch has no anti-rug settings.</span>\n                )}\n                {fairLaunch?.state.data.antiRugSetting &&\n                  fairLaunch.state.data.antiRugSetting.selfDestructDate && (\n                    <div>\n                      <h3>Anti-Rug Policy</h3>\n                      <p>\n                        This raffle is governed by a smart contract to prevent\n                        the artist from running away with your money.\n                      </p>\n                      <p>How it works:</p>\n                      This project will retain{' '}\n                      {fairLaunch.state.data.antiRugSetting.reserveBp / 100}% (◎{' '}\n                      {(fairLaunch?.treasury *\n                        fairLaunch.state.data.antiRugSetting.reserveBp) /\n                        (LAMPORTS_PER_SOL * 10000)}\n                      ) of the pledged amount in a locked state until all but{' '}\n                      {fairLaunch.state.data.antiRugSetting.tokenRequirement.toNumber()}{' '}\n                      NFTs (out of up to{' '}\n                      {fairLaunch.state.data.numberOfTokens.toNumber()}) have\n                      been minted.\n                      <p>\n                        If more than{' '}\n                        {fairLaunch.state.data.antiRugSetting.tokenRequirement.toNumber()}{' '}\n                        NFTs remain as of{' '}\n                        {toDate(\n                          fairLaunch.state.data.antiRugSetting.selfDestructDate,\n                        )?.toLocaleDateString()}{' '}\n                        at{' '}\n                        {toDate(\n                          fairLaunch.state.data.antiRugSetting.selfDestructDate,\n                        )?.toLocaleTimeString()}\n                        , you will have the option to get a refund of{' '}\n                        {fairLaunch.state.data.antiRugSetting.reserveBp / 100}%\n                        of the cost of your token.\n                      </p>\n                      {fairLaunch?.ticket?.data &&\n                        !fairLaunch?.ticket?.data.state.withdrawn && (\n                          <MintButton\n                            onClick={onRugRefund}\n                            variant=\"contained\"\n                            disabled={\n                              !!!fairLaunch.ticket.data ||\n                              !fairLaunch.ticket.data.state.punched ||\n                              Date.now() / 1000 <\n                                fairLaunch.state.data.antiRugSetting.selfDestructDate.toNumber()\n                            }\n                          >\n                            {isMinting ? (\n                              <CircularProgress />\n                            ) : Date.now() / 1000 <\n                              fairLaunch.state.data.antiRugSetting.selfDestructDate.toNumber() ? (\n                              <span>\n                                Refund in...\n                                <Countdown\n                                  date={toDate(\n                                    fairLaunch.state.data.antiRugSetting\n                                      .selfDestructDate,\n                                  )}\n                                />\n                              </span>\n                            ) : (\n                              'Refund'\n                            )}\n                            {}\n                          </MintButton>\n                        )}\n                      <div style={{ textAlign: 'center', marginTop: '-5px' }}>\n                        {fairLaunch?.ticket?.data &&\n                          !fairLaunch?.ticket?.data?.state.punched && (\n                            <small>\n                              You currently have a ticket but it has not been\n                              punched yet, so cannot be refunded.\n                            </small>\n                          )}\n                      </div>\n                    </div>\n                  )}\n              </MuiDialogContent>\n            </Dialog>\n            <Dialog\n              open={howToOpen}\n              onClose={() => setHowToOpen(false)}\n              PaperProps={{\n                style: { backgroundColor: '#222933', borderRadius: 6 },\n              }}\n            >\n              <MuiDialogTitle\n                disableTypography\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Link\n                  component=\"button\"\n                  variant=\"h6\"\n                  color=\"textSecondary\"\n                  onClick={() => {\n                    setHowToOpen(true);\n                  }}\n                >\n                  How it works\n                </Link>\n                <IconButton\n                  aria-label=\"close\"\n                  className={dialogStyles.closeButton}\n                  onClick={() => setHowToOpen(false)}\n                >\n                  <CloseIcon />\n                </IconButton>\n              </MuiDialogTitle>\n              <MuiDialogContent>\n                <Typography variant=\"h6\">\n                  Phase 1 - Set the fair price:\n                </Typography>\n                <Typography gutterBottom color=\"textSecondary\">\n                  Enter a bid in the range provided by the artist. The median of\n                  all bids will be the \"fair\" price of the raffle ticket.{' '}\n                \n                </Typography>\n                <Typography variant=\"h6\">Phase 2 - Grace period:</Typography>\n                <Typography gutterBottom color=\"textSecondary\">\n                  If your bid was at or above the fair price, you automatically\n                  get a raffle ticket at that price. There's nothing else you\n                  need to do. Your excess SOL will be returned to you when the\n                  Fair Launch authority withdraws from the treasury. If your bid\n                  is below the median price, you can still opt in at the fair\n                  price during this phase.\n                </Typography>\n                {candyMachinePredatesFairLaunch ? (\n                  <>\n                    <Typography variant=\"h6\">\n                      Phase 3 - The Candy Machine:\n                    </Typography>\n                    <Typography gutterBottom color=\"textSecondary\">\n                      Everyone who got a raffle ticket at the fair price is\n                      entered to win an NFT. If you win an NFT, congrats. If you\n                      don’t, no worries, your SOL will go right back into your\n                      wallet.\n                    </Typography>\n                  </>\n                ) : (\n                  <>\n                    <Typography variant=\"h6\">Phase 3 - The Lottery:</Typography>\n                    <Typography gutterBottom color=\"textSecondary\">\n                      Everyone who got a raffle ticket at the fair price is\n                      entered to win a Fair Launch Token that entitles them to\n                      an NFT at a later date using a Candy Machine here. If you\n                      don’t win, no worries, your SOL will go right back into\n                      your wallet.\n                    </Typography>\n                    <Typography variant=\"h6\">\n                      Phase 4 - The Candy Machine:\n                    </Typography>\n                    <Typography gutterBottom color=\"textSecondary\">\n                      On{' '}\n                      {candyMachine?.state.goLiveDate\n                        ? toDate(\n                            candyMachine?.state.goLiveDate,\n                          )?.toLocaleString()\n                        : ' some later date'}\n                      , you will be able to exchange your Fair Launch token for\n                      an NFT using the Candy Machine at this site by pressing\n                      the Mint Button.\n                    </Typography>\n                  </>\n                )}\n              </MuiDialogContent>\n            </Dialog>\n\n            {/* {wallet.connected && (\n              <p>\n                Address: {shortenAddress(wallet.publicKey?.toBase58() || '')}\n              </p>\n            )}\n\n            {wallet.connected && (\n              <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\n            )} */}\n          </Grid>\n        </Paper>\n      </Container>\n\n      {fairLaunch && (\n        <Container\n          maxWidth=\"xs\"\n          style={{ position: 'relative', marginTop: 10 }}\n        >\n          <div style={{ margin: 20 }}>\n            <Grid container direction=\"row\" wrap=\"nowrap\">\n              <Grid container md={4} direction=\"column\">\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Bids\n                </Typography>\n                <Typography\n                  variant=\"h6\"\n                  color=\"textPrimary\"\n                  style={{ fontWeight: 'bold' }}\n                >\n                  {fairLaunch?.state.numberTicketsSold.toNumber() || 0}\n                </Typography>\n              </Grid>\n              <Grid container md={4} direction=\"column\">\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Median bid\n                </Typography>\n                <Typography\n                  variant=\"h6\"\n                  color=\"textPrimary\"\n                  style={{ fontWeight: 'bold' }}\n                >\n                  ◎ {formatNumber.format(median)}\n                </Typography>\n              </Grid>\n              <Grid container md={4} direction=\"column\">\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Total raised\n                </Typography>\n                <Typography\n                  variant=\"h6\"\n                  color=\"textPrimary\"\n                  style={{ fontWeight: 'bold' }}\n                >\n                  ◎{' '}\n                  {formatNumber.format(\n                    (fairLaunch?.treasury || 0) / LAMPORTS_PER_SOL,\n                  )}\n                </Typography>\n              </Grid>\n            </Grid>\n          </div>\n        </Container>\n      )}\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport default Home;\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.5),\n        marginRight: 0,\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: theme.spacing(1),\n      marginRight: 0,\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    }\n  }),\n);\n\n\ninterface PhaseCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n  start?: Date;\n  end?: Date;\n}\n\ninterface CountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const PhaseCountdown: React.FC<PhaseCountdownProps> = ({\n  date,\n  status,\n  style,\n  start,\n  end,\n  onComplete,\n}) => {\n  const classes = useStyles();\n\n  const [isFixed, setIsFixed] = useState(start && end && date ? start.getTime() - Date.now() < 0 : false);\n\n  const renderCountdown = ({ days, hours, minutes, seconds, completed }: CountdownRender) => {\n    hours += days * 24\n    if (completed) {\n      return status ? <span className={classes.done}  >{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style} >\n          {isFixed && <Paper elevation={0}>\n            <span className={classes.item}>\n              +\n            </span>\n          </Paper>}\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      )\n    }\n  }\n\n  if (date && start && end) {\n    if (isFixed) {\n      <Countdown\n        date={start}\n        now={() => end.getTime()}\n        onComplete={() => setIsFixed(false)}\n        renderer={renderCountdown}\n      />\n    }\n  }\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    )\n  } else {\n    return null\n  }\n}\n","import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport confetti from 'canvas-confetti';\n\nexport interface ConfettiContextState {\n  dropConfetti: () => void;\n}\n\nconst ConfettiContext = React.createContext<ConfettiContextState | null>(null);\n\nexport const ConfettiProvider = ({ children = null as any }) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<confetti.CreateTypes>();\n\n  const dropConfetti = useMemo(\n    () => () => {\n      if (confettiRef.current && canvasRef.current) {\n        canvasRef.current.style.visibility = 'visible';\n        confettiRef\n          .current({\n            particleCount: 400,\n            spread: 160,\n            origin: { y: 0.3 },\n          })\n          ?.finally(() => {\n            if (canvasRef.current) {\n              canvasRef.current.style.visibility = 'hidden';\n            }\n          });\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (canvasRef.current && !confettiRef.current) {\n      canvasRef.current.style.visibility = 'hidden';\n      confettiRef.current = confetti.create(canvasRef.current, {\n        resize: true,\n        useWorker: true,\n      });\n    }\n  }, []);\n\n  const canvasStyle: React.CSSProperties = {\n    width: '100vw',\n    height: '100vh',\n    position: 'absolute',\n    zIndex: 1,\n    top: 0,\n    left: 0,\n  };\n\n  return (\n    <ConfettiContext.Provider value={{ dropConfetti }}>\n      <canvas ref={canvasRef as any} style={canvasStyle} />\n      {children}\n    </ConfettiContext.Provider>\n  );\n};\n\nexport const Confetti = () => {\n  const { dropConfetti } = useConfetti();\n\n  useEffect(() => {\n    dropConfetti();\n  }, [dropConfetti]);\n\n  return <></>;\n};\n\nexport const useConfetti = () => {\n  const context = useContext(ConfettiContext);\n  return context as ConfettiContextState;\n};\n","import './App.css';\nimport { useMemo } from 'react';\n\nimport Home from './Home';\n\nimport * as anchor from '@project-serum/anchor';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\n\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { ThemeProvider, createTheme } from '@material-ui/core';\nimport { ConfettiProvider } from './confetti';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst candyMachineId = process.env.REACT_APP_CANDY_MACHINE_ID\n  ? new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID)\n  : undefined;\n\nconst fairLaunchId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID!,\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <ConfettiProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                fairLaunchId={fairLaunchId}\n                connection={connection}\n                startDate={startDateSeed}\n                txTimeout={txTimeout}\n              />\n            </ConfettiProvider>\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}