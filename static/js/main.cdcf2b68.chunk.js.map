{"version":3,"sources":["fair-launch.ts","candy-machine.ts","utils.ts","connection.tsx","Home.tsx","countdown.tsx","confetti.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LotteryState","FAIR_LAUNCH_PROGRAM","anchor","PublicKey","fairLaunchId2","process","fairLaunchId3","fairLaunchId4","getFairLaunchState","anchorWallet","fairLaunchId","connection","a","provider","preflightCommitment","fetchIdl","idl","program","account","fairLaunch","fetch","state","console","log","authority","toBase58","getFairLaunchTicket","tokenMint","publicKey","fairLaunchTicket","bump","fairLaunchData","getBalance","treasury","lotteryData","Uint8Array","getFairLaunchLotteryBitmap","fairLaunchLotteryBitmap","getAccountInfo","fairLaunchLotteryBitmapObj","data","id","ticket","pubkey","lottery","punchTicket","getAtaForMint","buyerTokenAccount","amount","gt","currentMedian","anchorProgram","fairLaunchObj","seqKeys","i","numberTicketsSold","getFairLaunchTicketSeqLookup","push","arandom","Math","floor","random","length","toNumber","getSetupForTicketing","remainingAccounts","instructions","signers","rpc","adjustTicket","accounts","buyer","systemProgram","SystemProgram","programId","clock","SYSVAR_CLOCK_PUBKEY","__private","logAccounts","undefined","isSigner","isWritable","accountExists","createAssociatedTokenAccountInstruction","payer","tokenProgram","TOKEN_PROGRAM_ID","dev","findProgramAddress","Buffer","from","toBuffer","ticketKey","amountLamports","priceRangeStart","LAMPORTS_PER_SOL","seq","fairLaunchTicketSeqLookup","seqBump","instruction","createTicketSeq","rent","SYSVAR_RENT_PUBKEY","receiveRefund","transferAuthority","Keypair","generate","Token","createApproveInstruction","treasuryMint","purchaseTicket","fairLaunch2","fairLaunch3","fairLaunch4","stranger","fuckboi","CANDY_MACHINE_PROGRAM","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","associatedTokenAddress","walletAddress","splTokenMintAddress","keys","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","getCandyMachineState","candyMachineId","candyMachine","itemsAvailable","itemsRedeemed","itemsRemaining","isSoldOut","isActive","goLiveDate","Date","getTime","wallet","config","price","getMasterEdition","mint","getMetadata","mintOneToken","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","createInitMintInstruction","createMintToInstruction","metadataAddress","masterEdition","mintNft","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","sendTransactionWithRetry","ms","FAIR_LAUNCH_PROGRAM_ID","toDate","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asInteger","asNumber","toArrayLike","SequenceType","commitment","includesFeePayer","block","beforeSend","WalletNotConnectedError","transaction","Transaction","forEach","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","map","s","partialSign","signTransaction","sendSignedTransaction","signedTransaction","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","Phase","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","PhaseCountdown","date","start","end","onComplete","classes","useState","now","isFixed","renderCountdown","days","hours","minutes","seconds","completed","className","Paper","elevation","renderer","ConnectButton","styled","WalletDialogButton","MintContainer","div","MintButton","Button","dialogStyles","closeButton","position","right","top","palette","grey","ValueSlider","Slider","border","marginTop","boxShadow","lineHeight","marginLeft","isWinner","fairLaunchBalance","phaseThreeStarted","myByte","positionFromRight","pow","Home","props","isMinting","setIsMinting","contributed","setContributed","useWallet","useMemo","signAllTransactions","open","severity","alertState","setAlertState","setFairLaunch","setCandyMachine","howToOpen","setHowToOpen","refundExplainerOpen","setRefundExplainerOpen","showOpen","setShowOpen","onMint","connected","unpunched","onPunchTicket","mintTxId","txTimeout","msg","code","window","location","reload","indexOf","useEffect","currentHighest","tickSize","cndy","min","max","priceRangeEnd","step","median","highest","numberOfTokens","marks","label","filter","_","onDeposit","contributed2","phase","curr","phaseOne","phaseOneStart","phaseOneEnd","phaseTwoEnd","candyMachineGoLive","Phase0","Phase1","Phase2","Phase4","Phase3","Unknown","Lottery","getPhase","lt","Container","maxWidth","Link","component","variant","align","onClick","backgroundColor","Grid","container","direction","marginBottom","Typography","includes","x","withdrawn","paddingTop","Alert","onChange","ev","valueLabelDisplay","disabled","CircularProgress","toPrecision","punched","Dialog","onClose","PaperProps","disableTypography","IconButton","gutterBottom","Snackbar","autoHideDuration","ConfettiContext","React","createContext","ConfettiProvider","children","canvasRef","useRef","confettiRef","dropConfetti","current","visibility","particleCount","spread","origin","y","finally","confetti","create","resize","useWorker","Provider","ref","zIndex","left","createTheme","type","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","ThemeProvider","autoConnect","textAlign","startDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdcf2b68.chunk.js","sourcesContent":["// @ts-nocheck\nimport * as anchor from '@project-serum/anchor';\nimport * as flidl from './idl.json';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { Idl } from './idl';\nimport {\n  LAMPORTS_PER_SOL,\n  TransactionInstruction,\n  PublicKey,\n  Connection,\n} from '@solana/web3.js';\nimport {\n  createAssociatedTokenAccountInstruction,\n  getAtaForMint,\n  getFairLaunchTicketSeqLookup,\n} from './utils';\n\nexport const FAIR_LAUNCH_PROGRAM = new anchor.web3.PublicKey(\n  'HJdkPPVzo5YKBRQoswT5eaH8eATYCiATbDQchmNtBrav',\n);\n\nconst fairLaunchId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID!,\n);\n\nconst fairLaunchId2 = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID2!,\n);\n\nconst fairLaunchId3 = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID3!,\n);\n\nconst fairLaunchId4 = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID4!,\n);\nexport interface FairLaunchAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: FairLaunchState;\n  ticket: {\n    pubkey: anchor.web3.PublicKey;\n    bump: number;\n    data?: FairLaunchTicket;\n  };\n  lottery: {\n    pubkey: anchor.web3.PublicKey;\n    data?: Uint8Array;\n  };\n  treasury: number;\n}\n\nexport interface FairLaunchTicket {\n  fairLaunch: anchor.web3.PublicKey;\n  buyer: anchor.web3.PublicKey;\n  amount: anchor.BN;\n  state: {\n    punched?: {};\n    unpunched?: {};\n    withdrawn?: {};\n    no_sequence_struct: {};\n  };\n  bump: number;\n  seq: anchor.BN;\n}\n\nexport interface AntiRugSetting {\n  reserveBp: number;\n  tokenRequirement: anchor.BN;\n  selfDestructDate: anchor.BN;\n}\nexport interface FairLaunchState {\n  authority: anchor.web3.PublicKey;\n  dev: anchor.web3.PublicKey;\n  bump: number;\n\n  currentMedian: anchor.BN;\n  currentHighest: number;\n  currentEligibleHolders: anchor.BN;\n  data: {\n    antiRugSetting?: AntiRugSetting;\n    fee: anchor.BN;\n    numberOfTokens: anchor.BN;\n    phaseOneEnd: anchor.BN;\n    phaseOneStart: anchor.BN;\n    phaseTwoEnd: anchor.BN;\n    priceRangeEnd: anchor.BN;\n    priceRangeStart: anchor.BN;\n    lotteryDuration: anchor.BN;\n    tickSize: anchor.BN;\n    uuid: string;\n  };\n  numberTicketsDropped: anchor.BN;\n  numberTicketsPunched: anchor.BN;\n  numberTicketsSold: anchor.BN;\n  numberTicketsUnSeqed: anchor.BN;\n  numberTokensBurnedForRefunds: anchor.BN;\n  numberTokensPreminted: anchor.BN;\n  phaseThreeStarted: boolean;\n  tokenMint: anchor.web3.PublicKey;\n  tokenMintBump: number;\n  treasury: anchor.web3.PublicKey;\n  treasuryBump: number;\n  treasuryMint: anchor.web3.PublicKey; // only for SPL tokens\n  treasurySnapshot: null;\n}\n\nexport enum LotteryState {\n  Brewing = 'Brewing',\n  Finished = 'Finished',\n  PastDue = 'Past Due',\n}\n\nexport const getLotteryState = (\n  phaseThree: boolean | undefined,\n  lottery: Uint8Array | null,\n  lotteryDuration: anchor.BN,\n  phaseTwoEnd: anchor.BN,\n): LotteryState => {\n  if (\n    !phaseThree &&\n    (!lottery || lottery.length === 0) &&\n    phaseTwoEnd.add(lotteryDuration).lt(new anchor.BN(Date.now() / 1000))\n  ) {\n    return LotteryState.PastDue;\n  } else if (phaseThree) {\n    return LotteryState.Finished;\n  } else {\n    return LotteryState.Brewing;\n  }\n};\n\nexport const getFairLaunchState = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunchId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<FairLaunchAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(FAIR_LAUNCH_PROGRAM, provider);\n  const program = new anchor.Program(\n    idl,\n    FAIR_LAUNCH_PROGRAM,\n    provider,\n  );\n  const state: any = await program.account.fairLaunch.fetch(fairLaunchId);\n  console.log('afuck');\n  console.log(state.authority.toBase58());\n  const [fairLaunchTicket, bump] = await getFairLaunchTicket(\n    //@ts-ignore\n    state.tokenMint,\n    anchorWallet.publicKey,\n  );\n\n  let fairLaunchData: any;\n\n  try {\n    fairLaunchData = await program.account.fairLaunchTicket.fetch(\n      fairLaunchTicket,\n    );\n  } catch {\n    console.log('No ticket');\n  }\n\n  const treasury = await program.provider.connection.getBalance(state.treasury);\n\n  let lotteryData: Uint8Array = new Uint8Array([]);\n  let fairLaunchLotteryBitmap = (\n    await getFairLaunchLotteryBitmap(\n      //@ts-ignore\n      state.tokenMint,\n    )\n  )[0];\n\n  try {\n    const fairLaunchLotteryBitmapObj =\n      await program.provider.connection.getAccountInfo(fairLaunchLotteryBitmap);\n\n    lotteryData = new Uint8Array(fairLaunchLotteryBitmapObj?.data || []);\n  } catch (e) {\n    console.log('Could not find fair launch lottery.');\n    console.log(e);\n  }\n\n  return {\n    id: fairLaunchId,\n    state,\n    program,\n    ticket: {\n      pubkey: fairLaunchTicket,\n      bump,\n      data: fairLaunchData,\n    },\n    lottery: {\n      pubkey: fairLaunchLotteryBitmap,\n      data: lotteryData,\n    },\n    treasury,\n  };\n};\n\nconst FAIR_LAUNCH_LOTTERY_SIZE =\n  8 + // discriminator\n  32 + // fair launch\n  1 + // bump\n  8; // size of bitmask ones\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map(chunk =>\n      getMultipleAccountsCore(connection, chunk, commitment),\n    ),\n  );\n\n  const array = result\n    .map(\n      a =>\n        //@ts-ignore\n        a.array.map(acc => {\n          if (!acc) {\n            return undefined;\n          }\n\n          const { data, ...rest } = acc;\n          const obj = {\n            ...rest,\n            data: Buffer.from(data[0], 'base64'),\n          } as AccountInfo<Buffer>;\n          return obj;\n        }) as AccountInfo<Buffer>[],\n    )\n    //@ts-ignore\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string,\n) => {\n  const args = connection._buildArgs([keys], commitment, 'base64');\n\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  if (unsafeRes.error) {\n    throw new Error(\n      'failed to get info about account ' + unsafeRes.error.message,\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function chunks(array, size) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index) => array.slice(index * size, (index + 1) * size),\n  );\n}\nlet show1;\nlet show2;\nasync function getParticipationNft({\n  buyer,\n  payer,\n  anchorProgram,\n  fairLaunchTicket,\n  fairLaunch,\n  fairLaunchObj,\n  fairLaunchTicketObj,\n}: {\n  buyer: anchor.web3.PublicKey;\n  anchorProgram: anchor.Program;\n  payer: anchor.web3.Keypair;\n  fairLaunchTicket: anchor.web3.PublicKey;\n  fairLaunch: anchor.web3.PublicKey;\n  fairLaunchObj: any;\n  fairLaunchTicketObj: any;\n}): Promise<anchor.web3.PublicKey | null> {\n  if (\n    fairLaunchObj.participationMint &&\n    fairLaunchTicketObj.seq.toNumber() % fairLaunchObj.participationModulo == 0\n  ) {\n    console.log(buyer.toBase58(), 'gets participation token.');\n    const mint = anchor.web3.Keypair.generate();\n    let signers = [mint];\n    const tokenAccount = (\n      await getParticipationToken(\n        fairLaunchObj.authority,\n        fairLaunchObj.data.uuid,\n      )\n    )[0];\n    const buyerTokenNft = (await getAtaForMint(mint.publicKey, buyer))[0];\n    let instructions = [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports:\n          await anchorProgram.provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span,\n          ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer.publicKey,\n        payer.publicKey,\n      ),\n      createAssociatedTokenAccountInstruction(\n        buyerTokenNft,\n        payer.publicKey,\n        buyer,\n        mint.publicKey,\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        buyerTokenNft,\n        payer.publicKey,\n        [],\n        1,\n      ),\n    ];\n    await anchorProgram.rpc.mintParticipationNft({\n      accounts: {\n        fairLaunch,\n        fairLaunchTicket,\n        payer: payer.publicKey,\n        participationMint: fairLaunchObj.participationMint,\n        participationTokenAccount: tokenAccount,\n        buyer,\n        buyerNftTokenAccount: buyerTokenNft,\n        newMetadata: await getMetadata(mint.publicKey),\n        newEdition: await getMasterEdition(mint.publicKey),\n        newMint: mint.publicKey,\n        newMintAuthority: payer.publicKey,\n        metadata: await getMetadata(fairLaunchObj.participationMint),\n        masterEdition: await getMasterEdition(fairLaunchObj.participationMint),\n        editionMarkPda: await getEditionMarkPda(\n          fairLaunchObj.participationMint,\n          fairLaunchTicketObj.seq.toNumber(),\n        ),\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        // @ts-ignore\n        systemProgram: anchor.web3.SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      },\n      instructions,\n      signers,\n    });\n    return buyerTokenNft;\n  } else {\n    console.log(buyer.toBase58(), 'doesnt get participation token.');\n    return null;\n  }\n}\n\nasync function punchTicket2({\n  puncher,\n  payer,\n  anchorProgram,\n  fairLaunchTicket,\n  fairLaunch,\n  fairLaunchLotteryBitmap,\n  fairLaunchObj,\n  fairLaunchTicketObj,\n}: {\n  puncher: anchor.web3.PublicKey;\n  anchorProgram: anchor.Program;\n  payer: anchor.web3.Keypair;\n  fairLaunchTicket: anchor.web3.PublicKey;\n  fairLaunch: anchor.web3.PublicKey;\n  fairLaunchLotteryBitmap: anchor.web3.PublicKey;\n  fairLaunchObj: any;\n  fairLaunchTicketObj: any;\n}): Promise<anchor.web3.PublicKey> {\n  const buyerTokenAccount = (\n    await getAtaForMint(\n      //@ts-ignore\n      fairLaunchObj.tokenMint,\n      puncher,\n    )\n  )[0];\n\n  const accountExists = await anchorProgram.provider.connection.getAccountInfo(\n    buyerTokenAccount,\n  );\n\n  const instructions = !accountExists\n    ? [\n        createAssociatedTokenAccountInstruction(\n          buyerTokenAccount,\n          payer,\n          payer,\n          //@ts-ignore\n          fairLaunchObj.tokenMint,\n        ),\n      ]\n    : [];\n  \n  await anchorProgram.rpc.punchTicket({\n    accounts: {\n      fairLaunchTicket,\n      fairLaunch,\n      fairLaunchLotteryBitmap,\n      payer: payer,\n      buyerTokenAccount,\n      //@ts-ignore\n      tokenMint: fairLaunchObj.tokenMint,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      treasury: fairLaunchObj.treasury,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      dev: fairLaunchObj.dev,\n      buyer: puncher,\n    },\n    instructions: instructions.length > 0 ? instructions : undefined,\n  });\n\n  return buyerTokenAccount;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport const winnerwinnerchickendinner = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount,\n) => {\n  const anchorProgram = fairLaunch.program;\n  const fairLaunchKey = fairLaunch.publicKey;\n  const fairLaunchObj = fairLaunch.state;\n  const connection = new Connection(\n    'https://solana--mainnet.datahub.figment.io/apikey/4155938a6d3d97205edf8c20a466d691',\n  );await anchorProgram.rpc.withdrawFunds({\n          accounts: {\n            fairLaunch: fairLaunch.id,\n            // @ts-ignore\n            treasury: fairLaunchObj.treasury,\n            authority: anchorWallet.publicKey,\n            // @ts-ignore\n            tokenMint: fairLaunchObj.tokenMint,\n            // @ts-ignore\n            systemProgram: anchor.web3.SystemProgram.programId,\ndev: fairLaunchObj.dev,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n          },\n        });\n      }\n\n\nexport const punchTicket = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount,\n) => {\n  const fairLaunchTicket = (\n    await getFairLaunchTicket(\n      //@ts-ignore\n      fairLaunch.state.tokenMint,\n      anchorWallet.publicKey,\n    )\n  )[0];\n\n  const ticket = fairLaunch.ticket.data;\n\n  const fairLaunchLotteryBitmap = //@ts-ignore\n  (await getFairLaunchLotteryBitmap(fairLaunch.state.tokenMint))[0];\n  \n  const buyerTokenAccount = (\n    await getAtaForMint(\n      //@ts-ignore\n      fairLaunch.state.tokenMint,\n      anchorWallet.publicKey,\n    )\n  )[0];\n\n  if (ticket?.amount.gt(fairLaunch.state.currentMedian)) {\n    const anchorProgram = fairLaunch.program;\n    const fairLaunchKey = fairLaunch.publicKey;\n    const fairLaunchObj = fairLaunch.state;\n\n    const fairLaunchLotteryBitmap = (\n      await getFairLaunchLotteryBitmap(\n        //@ts-ignore\n        fairLaunchObj.tokenMint,\n      )\n    )[0];\n\n    const fairLaunchLotteryBitmapObj =\n      await anchorProgram.provider.connection.getAccountInfo(\n        fairLaunchLotteryBitmap,\n      );\n\n    const seqKeys = [];\n    //@ts-ignore\n    for (let i = 0; i < fairLaunchObj.numberTicketsSold; i++) {\n      seqKeys.push(\n        (\n          await getFairLaunchTicketSeqLookup(\n            //@ts-ignore\n            fairLaunchObj.tokenMint,\n            new anchor.BN(i),\n          )\n        )[0],\n      );\n    }\n    console.log(seqKeys);\n    let arandom = seqKeys[Math.floor(Math.random() * seqKeys.length)];\n    console.log(arandom);\n    console.log(1);\n    console.log(\n      'Adjusting down...',\n      ticket?.amount.toNumber(),\n      fairLaunch.state.currentMedian.toNumber(),\n    );\n    const { remainingAccounts, instructions, signers } =\n      await getSetupForTicketing(\n        fairLaunch.program,\n        fairLaunch.state.currentMedian.toNumber(),\n        anchorWallet,\n        fairLaunch,\n        fairLaunchTicket,\n      );\n    await fairLaunch.program.rpc.adjustTicket(fairLaunch.state.currentMedian, {\n      accounts: {\n        fairLaunchTicket,\n        fairLaunch: fairLaunch.id,\n        fairLaunchLotteryBitmap,\n        //@ts-ignore\n        treasury: fairLaunch.state.treasury,\n        buyer: anchorWallet.publicKey,\n        systemProgram: anchor.web3.SystemProgram.programId,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      },\n      __private: { logAccounts: true },\n      instructions: instructions.length > 0 ? instructions : undefined,\n      remainingAccounts: [\n        {\n          pubkey: anchorWallet.publicKey,\n          isSigner: true,\n          isWritable: true,\n        },\n        ...remainingAccounts,\n      ],\n      signers,\n    });\n  }\n\n  const accountExists =\n    await fairLaunch.program.provider.connection.getAccountInfo(\n      buyerTokenAccount,\n    );\n\n  const instructions = !accountExists\n    ? [\n        createAssociatedTokenAccountInstruction(\n          buyerTokenAccount,\n          anchorWallet.publicKey,\n          anchorWallet.publicKey,\n          //@ts-ignore\n          fairLaunch.state.tokenMint,\n        ),\n      ]\n    : [];\n\n  await fairLaunch.program.rpc.punchTicket({\n    accounts: {\n      fairLaunchTicket,\n      fairLaunch: fairLaunch.id,\n      fairLaunchLotteryBitmap,\n      payer: anchorWallet.publicKey,\n      buyerTokenAccount,\n      //@ts-ignore\n      tokenMint: fairLaunch.state.tokenMint,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      treasury: fairLaunch.state.treasury,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      dev: new PublicKey('6X3oVE5Hq923M2UEJregoA7zLxuc2jXcJJegpy24pb2T'),\n      buyer: anchorWallet.publicKey,\n    },\n    instructions: instructions.length > 0 ? instructions : undefined,\n  });\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM,\n  );\n};\n\nexport const getFairLaunchLotteryBitmap = async (\n  tokenMint: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), Buffer.from('lottery')],\n    FAIR_LAUNCH_PROGRAM,\n  );\n};\n\nconst getSetupForTicketing = async (\n  anchorProgram: anchor.Program,\n  amount: number,\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n  ticketKey: anchor.web3.PublicKey,\n): Promise<{\n  remainingAccounts: {\n    pubkey: anchor.web3.PublicKey | null;\n    isWritable: boolean;\n    isSigner: boolean;\n  }[];\n  instructions: TransactionInstruction[];\n  signers: anchor.web3.Keypair[];\n  amountLamports: number;\n}> => {\n  if (!fairLaunch) {\n    return {\n      remainingAccounts: [],\n      instructions: [],\n      signers: [],\n      amountLamports: 0,\n    };\n  }\n  const ticket = fairLaunch.ticket;\n  console.log(1);\n  console.log(ticket);\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers = [];\n\n  let amountLamports = 0;\n  //@ts-ignore\n  if (amount == 0) {\n    amountLamports = fairLaunch.state.data.priceRangeStart.toNumber();\n  } else {\n    amountLamports = amount * LAMPORTS_PER_SOL;\n  }\n  console.log(ticket.data);\n  if (ticket.data) {\n    const [fairLaunchTicketSeqLookup, seqBump] =\n      await getFairLaunchTicketSeqLookup(\n        fairLaunch.state.tokenMint,\n        ticket.data?.seq,\n      );\n\n    const seq = await fairLaunch.program.provider.connection.getAccountInfo(\n      fairLaunchTicketSeqLookup,\n    );\n    if (!seq) {\n      instructions.push(\n        await fairLaunch.program.instruction.createTicketSeq(seqBump, {\n          accounts: {\n            fairLaunchTicketSeqLookup,\n            fairLaunch: fairLaunch.id,\n            fairLaunchTicket: ticketKey,\n            payer: anchorWallet.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n            rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n          },\n          signers: [],\n        }),\n      );\n    }\n  }\n\n  return {\n    remainingAccounts,\n    instructions,\n    signers,\n    amountLamports,\n  };\n};\n\nexport const receiveRefund = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n) => {\n  if (!fairLaunch) {\n    return;\n  }\n\n  const buyerTokenAccount = (\n    await getAtaForMint(fairLaunch.state.tokenMint, anchorWallet.publicKey)\n  )[0];\n\n  const transferAuthority = anchor.web3.Keypair.generate();\n\n  const signers = [transferAuthority];\n  const instructions = [\n    Token.createApproveInstruction(\n      TOKEN_PROGRAM_ID,\n      buyerTokenAccount,\n      transferAuthority.publicKey,\n      anchorWallet.publicKey,\n      [],\n      1,\n    ),\n  ];\n\n  const remainingAccounts = [];\n\n  if (fairLaunch.state.treasuryMint) {\n    remainingAccounts.push({\n      pubkey: fairLaunch.state.treasuryMint,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: (\n        await getAtaForMint(\n          fairLaunch.state.treasuryMint,\n          anchorWallet.publicKey,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n  }\n\n  console.log(\n    'tfr',\n    fairLaunch.state.treasury.toBase58(),\n    anchorWallet.publicKey.toBase58(),\n    buyerTokenAccount.toBase58(),\n  );\n  await fairLaunch.program.rpc.receiveRefund({\n    accounts: {\n      fairLaunch: fairLaunch.id,\n      treasury: fairLaunch.state.treasury,\n      buyer: anchorWallet.publicKey,\n      buyerTokenAccount,\n      transferAuthority: transferAuthority.publicKey,\n      tokenMint: fairLaunch.state.tokenMint,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n\n    __private: { logAccounts: true },\n    remainingAccounts,\n    instructions,\n    signers,\n  });\n};\nexport const purchaseTicket = async (\n  amount: number,\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n) => {\n  if (!fairLaunch) {\n    return;\n  }\n\n  const ticket = fairLaunch.ticket.data;\n  const anchorProgram = fairLaunch.program;\n  const fairLaunchKey = fairLaunch.publicKey;\n  const fairLaunchObj = fairLaunch.state;\n  \n  const [fairLaunchTicket, bump] = await getFairLaunchTicket(\n    //@ts-ignore\n    fairLaunch.state.tokenMint,\n    anchorWallet.publicKey,\n  );\n\n  let { remainingAccounts, instructions, signers, amountLamports } =\n    await getSetupForTicketing(\n      fairLaunch.program,\n      amount,\n      anchorWallet,\n      fairLaunch,\n      fairLaunchTicket,\n    );\n  if (amount == 0) {\n    amountLamports = 0;\n  }\n\n  await fairLaunch.program.rpc.purchaseTicket(\n    bump,\n    new anchor.BN(amountLamports),\n    {\n      accounts: {\n        fairLaunchTicket,\n        fairLaunch: fairLaunch.id,\n        fairLaunch2: fairLaunchId2,\n        fairLaunch3: fairLaunchId3,\n        fairLaunch4: fairLaunchId4,\n        tokenMint:fairLaunchObj.tokenMint,\n        authority: fairLaunchObj.authority,\n        //@ts-ignore\n        treasury: fairLaunch.state.treasury,\n        buyer: anchorWallet.publicKey,\n        payer: anchorWallet.publicKey,\n        systemProgram: anchor.web3.SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        dev: fairLaunchObj.dev,\n        stranger: new PublicKey(\"6X3oVE5Hq923M2UEJregoA7zLxuc2jXcJJegpy24pb2T\"),\n        arandom: new PublicKey(\"6X3oVE5Hq923M2UEJregoA7zLxuc2jXcJJegpy24pb2T\"),\n        fuckboi: new anchor.web3.PublicKey(\n          'FubJLhprTzFDddPafdiRKXfN6dypyF1jLwZA9i2Cm7R9',\n        ),\n      },\n      __private: { logAccounts: true },\n      remainingAccounts,\n      signers,\n      instructions: instructions.length > 0 ? instructions : undefined,\n    },\n  );\n};\n\nexport const withdrawFunds = async (\n  anchorWallet: anchor.Wallet,\n  fairLaunch: FairLaunchAccount | undefined,\n) => {\n  if (!fairLaunch) {\n    return;\n  }\n\n  // TODO: create sequence ticket\n\n  const remainingAccounts = [];\n\n  //@ts-ignore\n  if (fairLaunch.state.treasuryMint) {\n    remainingAccounts.push({\n      //@ts-ignore\n      pubkey: fairLaunch.state.treasuryMint,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: (\n        await getAtaForMint(\n          //@ts-ignore\n          fairLaunch.state.treasuryMint,\n          anchorWallet.publicKey,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    });\n  }\n\n  await fairLaunch.program.rpc.withdrawFunds({\n    accounts: {\n      fairLaunch: fairLaunch.id,\n      // @ts-ignore\n      treasury: fairLaunch.state.treasury,\n      authority: anchorWallet.publicKey,\n      // @ts-ignore\n      tokenMint: fairLaunch.state.tokenMint,\n      systemProgram: anchor.web3.SystemProgram.programId,\n    },\n    remainingAccounts,\n  });\n};\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactionWithRetry } from './connection';\n\nimport {\n  getAtaForMint,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  config: anchor.web3.PublicKey;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: state.data.goLiveDate.toNumber() < new Date().getTime() / 1000,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      config: state.config,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = (\n    await getAtaForMint(candyMachine.state.tokenMint, payer)\n  )[0];\n\n  const candyMachineAddress = candyMachine.id;\n\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  let tokenAccount;\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft({\n      accounts: {\n        config: candyMachine.state.config,\n        candyMachine: candyMachineAddress,\n        payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  if (tokenAccount) {\n    instructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  try {\n    return (\n      await sendTransactionWithRetry(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructions,\n        signers,\n      )\n    ).txid;\n  } catch (e) {\n    console.log(e);\n  }\n  return 'j';\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey(\n  'HJdkPPVzo5YKBRQoswT5eaH8eATYCiATbDQchmNtBrav',\n);\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asInteger: (val?: anchor.BN) => {\n    if (!val) {\n      return 1;\n    }\n    return val.toNumber();\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      tokenMint.toBuffer(),\n      seq.toArrayLike(Buffer, 'le', 8),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport {\n  WalletNotConnectedError,\n} from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n) {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        stopPoint = 1;\n      } else {\n        stopPoint = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<number> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          return breakEarlyObject.i; // Return the txn we failed on by index\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return signedTxns.length;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @ts-nocheck\n\nimport { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  CircularProgress,\n  Container,\n  IconButton,\n  Link,\n  Slider,\n  Snackbar,\n} from '@material-ui/core';\n// @ts-ignore\nimport {\n  TwitterTimelineEmbed,\n  TwitterShareButton,\n  TwitterFollowButton,\n  TwitterHashtagButton,\n  TwitterMentionButton,\n  TwitterTweetEmbed,\n  TwitterMomentShare,\n  TwitterDMButton,\n  TwitterVideoEmbed,\n  TwitterOnAirButton,\n} from 'react-twitter-embed';\n\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { createStyles, Theme } from '@material-ui/core/styles';\nimport { PhaseCountdown } from './countdown';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport Alert from '@material-ui/lab/Alert';\n\nimport * as anchor from '@project-serum/anchor';\n\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  getCandyMachineState,\n  mintOneToken,\n} from './candy-machine';\n\nimport {\n  FairLaunchAccount,\n  FairLaunchAccount2,\n  FairLaunchAccount3,\n  FairLaunchAccount4,\n  getFairLaunchState,\n  punchTicket,\n  purchaseTicket,\n  receiveRefund,\n} from './fair-launch';\n\nimport { formatNumber, getAtaForMint, toDate } from './utils';\nimport Countdown from 'react-countdown';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your styles here\n\nconst dialogStyles: any = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nconst ValueSlider = styled(Slider)({\n  color: '#C0D5FE',\n  height: 8,\n  '& > *': {\n    height: 4,\n  },\n  '& .MuiSlider-track': {\n    border: 'none',\n    height: 4,\n  },\n  '& .MuiSlider-thumb': {\n    height: 24,\n    width: 24,\n    marginTop: -10,\n    background: 'linear-gradient(180deg, #604AE5 0%, #813EEE 100%)',\n    border: '2px solid currentColor',\n    '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n      boxShadow: 'inherit',\n    },\n    '&:before': {\n      display: 'none',\n    },\n  },\n  '& .MuiSlider-valueLabel': {\n    '& > *': {\n      background: 'linear-gradient(180deg, #604AE5 0%, #813EEE 100%)',\n    },\n    lineHeight: 1.2,\n    fontSize: 12,\n    padding: 0,\n    width: 32,\n    height: 32,\n    marginLeft: 9,\n  },\n});\n\nenum Phase {\n  Phase0,\n  Phase1,\n  Phase2,\n  Lottery,\n  Phase3,\n  Phase4,\n  Unknown,\n}\n\nconst Header = (props: {\n  phaseName: string;\n  desc: string;\n  date: anchor.BN | undefined;\n  status?: string;\n}) => {\n  const { phaseName, desc, date, status } = props;\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid xs={6} justifyContent=\"center\" direction=\"column\">\n        <Typography variant=\"h5\" style={{ fontWeight: 600 }}>\n          {phaseName}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          {desc}\n        </Typography>\n      </Grid>\n     \n    </Grid>\n  );\n};\n\nfunction getPhase(\n  fairLaunch: FairLaunchAccount | undefined,\n  candyMachine: CandyMachineAccount | undefined,\n): Phase {\n  const curr = new Date().getTime();\n\n  const phaseOne = toDate(fairLaunch?.state.data.phaseOneStart)?.getTime();\n  const phaseOneEnd = toDate(fairLaunch?.state.data.phaseOneEnd)?.getTime();\n  const phaseTwoEnd = toDate(fairLaunch?.state.data.phaseTwoEnd)?.getTime();\n  const candyMachineGoLive = toDate(candyMachine?.state.goLiveDate)?.getTime();\n\n  if (phaseOne && curr < phaseOne) {\n    return Phase.Phase0;\n  } else if (phaseOneEnd && curr <= phaseOneEnd) {\n    return Phase.Phase1;\n  } else if (phaseTwoEnd && curr <= phaseTwoEnd) {\n    return Phase.Phase2;\n  } else if (!fairLaunch?.state.phaseThreeStarted) {\n    return Phase.Lottery;\n  } else if (\n    fairLaunch?.state.phaseThreeStarted &&\n    candyMachineGoLive &&\n    curr > candyMachineGoLive\n  ) {\n    return Phase.Phase4;\n  } else if (fairLaunch?.state.phaseThreeStarted) {\n    return Phase.Phase3;\n  }\n\n  return Phase.Unknown;\n}\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  fairLaunchId: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n}\n\nconst FAIR_LAUNCH_LOTTERY_SIZE =\n  8 + // discriminator\n  32 + // fair launch\n  1 + // bump\n  8; // size of bitmask ones\n\nconst isWinner = (\n  fairLaunch: FairLaunchAccount | undefined,\n  fairLaunchBalance: number,\n): boolean => {\n  console.log(fairLaunchBalance);\n  if (fairLaunchBalance > 0) return true;\n  if (\n    !fairLaunch?.lottery.data ||\n    !fairLaunch?.lottery.data.length ||\n    !fairLaunch?.ticket.data?.seq ||\n    !fairLaunch?.state.phaseThreeStarted\n  ) {\n    console.log('false');\n    return false;\n  }\n  const myByte =\n    fairLaunch.lottery.data[\n      FAIR_LAUNCH_LOTTERY_SIZE +\n        Math.floor(fairLaunch.ticket.data?.seq.toNumber() / 8)\n    ];\n\n  const positionFromRight = 7 - (fairLaunch.ticket.data?.seq.toNumber() % 8);\n  const mask = Math.pow(2, positionFromRight);\n  const isWinner = myByte & mask;\n\n  return isWinner > 0;\n};\nfunction sleep(ms: any) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nlet first = true;\n\nconst Home = (props: HomeProps) => {\n  const [fairLaunchBalance, setFairLaunchBalance] = useState<number>(0);\n  const [yourSOLBalance, setYourSOLBalance] = useState<number | null>(null);\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n  const [contributed, setContributed] = useState(0);\n\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n\n  const [fairLaunch, setFairLaunch] = useState<FairLaunchAccount>();\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [howToOpen, setHowToOpen] = useState(false);\n  const [refundExplainerOpen, setRefundExplainerOpen] = useState(false);\n  const [showOpen, setShowOpen] = useState(false);\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        if (\n          fairLaunch?.ticket.data?.state.unpunched &&\n          isWinner(fairLaunch, fairLaunchBalance)\n        ) {\n          await onPunchTicket();\n        }\n\n        const mintTxId = await mintOneToken(candyMachine, wallet.publicKey);\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          'singleGossip',\n          false,\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n    } finally {\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      try {\n        const state = await getFairLaunchState(\n          anchorWallet,\n          props.fairLaunchId,\n          props.connection,\n        );\n\n        setFairLaunch(state);\n        if (fairLaunch?.ticket.data){\n          setContributed(\n          (\n            fairLaunch?.state.currentHighest / LAMPORTS_PER_SOL + formatNumber.asNumber(fairLaunch?.state.data.tickSize) - (fairLaunch?.ticket.data?.amount.toNumber() / LAMPORTS_PER_SOL) \n          ),\n        );\n        }\n        else {\n        setContributed(\n          (\n            fairLaunch?.state.currentHighest / LAMPORTS_PER_SOL + formatNumber.asNumber(fairLaunch?.state.data.tickSize)\n          ),\n        );\n      }\n      } catch (e) {\n        console.log('Problem getting fair launch state');\n        console.log(e);\n      }\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            props.connection,\n          );\n          setCandyMachine(cndy);\n        } catch (e) {\n          console.log('Problem getting candy machine state');\n          console.log(e);\n        }\n      } else {\n        console.log('No candy machine detected in configuration.');\n      }\n    })();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    props.fairLaunchId,\n  ]);\n\n  const min = formatNumber.asNumber(fairLaunch?.state.data.priceRangeStart);\n  const max = formatNumber.asNumber(fairLaunch?.state.data.priceRangeEnd);\n  const step = formatNumber.asNumber(fairLaunch?.state.data.tickSize);\n  const median = formatNumber.asNumber(fairLaunch?.state.currentMedian);\n  // @ts-ignore\n  const highest = fairLaunch?.state.currentHighest / LAMPORTS_PER_SOL;\n  let numtickets = formatNumber.asInteger(\n    fairLaunch?.state.data.numberOfTokens,\n  );\n  console.log(min);\n  const marks = [\n    \n    {\n      value: highest || 0,\n      label: `Winning Bid: ${highest} SOL`,\n    },\n  ].filter(_ => _ !== undefined) as any;\n\n  const onDeposit = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n    // @ts-ignore\n    console.log('deposit');\n    setIsMinting(true);\n\n    // @ts-ignore\n    console.log(fairLaunch.state.authority.toBase58());\n    console.log(anchorWallet.publicKey.toBase58());\n    \n    try {\n      let contributed2;\n      if (fairLaunch?.ticket.data){\n          contributed2 = fairLaunch?.state.currentHighest / LAMPORTS_PER_SOL + 0.0138// - (fairLaunch?.ticket.data?.amount.toNumber() / LAMPORTS_PER_SOL) \n        \n        }\n        else {\n        contributed2 =  fairLaunch?.state.currentHighest / LAMPORTS_PER_SOL + 0.0138\n          \n      }\n      console.log('cont2: ' + contributed2.toString())\n      \n      await purchaseTicket(contributed2, anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: `Congratulations! Bid ${\n          fairLaunch?.ticket.data ? 'updated' : 'inserted'\n        }!`,\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n  const onRugRefund = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    console.log('refund');\n    try {\n      setIsMinting(true);\n      await receiveRefund(anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message:\n          'Congratulations! You have received a refund. This is an irreversible action.',\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n  const onRefundTicket = async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    console.log('refund');\n    try {\n      setIsMinting(true);\n      await purchaseTicket(0, anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message:\n          'Congratulations! Funds withdrawn. This is an irreversible action.',\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n\n  const onPunchTicket = async () => {\n    if (!anchorWallet || !fairLaunch || !fairLaunch.ticket) {\n      return;\n    }\n\n    console.log('punch');\n    setIsMinting(true);\n    try {\n      await punchTicket(anchorWallet, fairLaunch);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Congratulations! Ticket punched!',\n        severity: 'success',\n      });\n    } catch (e) {\n      console.log(e);\n      setIsMinting(false);\n      setAlertState({\n        open: true,\n        message: 'Something went wrong.',\n        severity: 'error',\n      });\n    }\n  };\n\n  const phase = getPhase(fairLaunch, candyMachine);\n\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  console.log(fairLaunch?.treasury);\n  const candyMachinePredatesFairLaunch =\n    candyMachine?.state.goLiveDate &&\n    fairLaunch?.state.data.phaseTwoEnd &&\n    candyMachine?.state.goLiveDate.lt(fairLaunch?.state.data.phaseTwoEnd);\n\n  const notEnoughSOL = false;\n  // @ts-ignore\n  if (fairLaunch != undefined) {\n    console.log(fairLaunch.ticket);\n  }\n  return (\n    <>\n      <Container style={{ marginTop: 0 }}>\n        <Container maxWidth=\"xl\" style={{ position: 'relative' }}>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'flex-end',\n            }}\n          >\n            <Link\n              component=\"button\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n              align=\"right\"\n              onClick={() => {\n                setShowOpen(true);\n              }}\n            >\n              gm :) Each of these games are separate, yet related. Remember to refresh,...\n            </Link>\n          </div>\n        </Container>\n        <Container maxWidth=\"xl\" style={{ position: 'relative' }}>\n          <Paper\n            style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\n          >\n          <Grid>\n            \n              {fairLaunch && (\n               <div />\n              )}\n              {fairLaunch &&  (\n                <Grid\n                  container\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  style={{\n                    height: 200,\n                    marginTop: 0,\n                    marginBottom: 0,\n                    background: '#384457',\n                    borderRadius: 6,\n                  }}\n                >\n                <Typography variant=\"h6\" style={{ fontWeight: 900 }}>\n                                  Out of {fairLaunch?.state.numberTicketsSold.toNumber() || 0} bids,  \n\n                  </Typography>\n                  <Typography variant=\"h5\" style={{ fontWeight: 900 }}>\n                    {fairLaunch.state.authority.toBase58().slice(0, 3) +\n                      '...' +\n                      fairLaunch.state.authority\n                        .toBase58()\n                        .slice(\n                          fairLaunch.state.authority.toBase58().length - 3,\n                          fairLaunch.state.authority.toBase58().length,\n                        )}{' '}\n                    is Going to Win 1st Prize of ◎{''}\n                    {fairLaunch?.treasury / 1000000000}! If nobody outbids 'em in \n                  </Typography>\n                  <PhaseCountdown\n          date={toDate(fairLaunch?.state.data.phaseOneEnd)}\n          style={{ justifyContent: 'flex-end' }}\n          status={'Time...  '}\n        />  \n                  {[Phase.Phase2].includes(phase) ? (\n                    <Typography>\n                      Press this button, winner gets the pot and we start over :)\n                    </Typography>\n                    \n                  ) : [Phase.Phase0, Phase.Phase1].includes(phase) &&\n                    !fairLaunch.ticket.data ? (\n                    <>\n                      {' '}\n                        \n                    </>\n                  ) : [Phase.Phase0, Phase.Phase1].includes(phase) &&\n                    fairLaunch.ticket.data ? (\n                    <>\n                      <Typography variant=\"h6\" style={{ fontWeight: 900 }}>\n                        Your bid: {formatNumber.format(\n                          (fairLaunch?.ticket.data?.amount.toNumber() || 0) /\n                            LAMPORTS_PER_SOL,\n                        )}{' '}\n                        SOL\n                      </Typography>\n                    </>\n                  ) : // @ts-ignore\n                  [Phase.Phase2].includes(phase) &&\n                    fairLaunch.ticket.data &&\n                    fairLaunch?.ticket.data?.amount.toNumber() < median ? (\n                    <>\n                      <Typography>Your bid</Typography>\n                      <Typography variant=\"h6\" style={{ fontWeight: 900 }}>\n                        {formatNumber.format(\n                          (fairLaunch?.ticket.data?.amount.toNumber() || 0) /\n                            LAMPORTS_PER_SOL,\n                        )}{' '}\n                        SOL\n                      </Typography>\n                      <Typography>\n                        Median Bid - The Minimum To Qualify For A Chance At\n                        Bidders Sharing 33% Of The Pot :)\n                      </Typography>\n                      <Typography variant=\"h6\" style={{ fontWeight: 900 }}>\n                        {formatNumber.format((median || 0) / LAMPORTS_PER_SOL)}{' '}\n                        SOL\n                      </Typography>\n                      <Typography>\n                        Congrats on your bid! The Authority is now chosen and\n                        will win 66% of the pot. If you want a chance to win a\n                        share of what remains in the pot, adjust bid. GLHF!\n                      </Typography>\n                    </>\n                  ) : // @ts-ignore\n                  [Phase.Phase2].includes(phase) &&\n                    fairLaunch.ticket.data &&\n                    fairLaunch?.ticket.data?.amount.toNumber() >= median ? (\n                    <>\n                      \n                    </>\n                  ) : (\n                     <>\n                      <MintButton\n                        onClick={onDeposit}\n                        variant=\"contained\"\n                        x\n                      >\n                        \n                          'Someone won! Press this button! (but only from a brand-new wallet...)'\n                        {}\n                      </MintButton>\n                    </>\n                  )}\n                </Grid>\n              )}\n              {fairLaunch && (\n                <>\n                  {[\n                    Phase.Phase1,\n                    Phase.Phase2,\n                    Phase.Phase3,\n                    Phase.Lottery,\n                  ].includes(phase) &&\n                    fairLaunch?.ticket?.data?.state.withdrawn && (\n                      <div style={{ paddingTop: '15px' }}>\n                        <Alert severity=\"error\">\n                          Your bid was withdrawn and cannot be adjusted or\n                          re-inserted.\n                        </Alert>\n                      </div>\n                    )}\n                  {[Phase.Phase1, Phase.Phase2].includes(phase) &&\n                    fairLaunch.state.currentMedian &&\n                    fairLaunch?.ticket?.data?.amount &&\n                    !fairLaunch?.ticket?.data?.state.withdrawn &&\n                    fairLaunch.state.currentMedian.gt(\n                      fairLaunch?.ticket?.data?.amount,\n                    ) && (\n                      <div style={{ paddingTop: '15px' }}>\n                        <Alert severity=\"warning\">\n                          Your bid is currently below the average bid and will\n                          not be eligible for any prize: not 1st place, none of the runner-ups, and none of the lucky 10% off each new bid :(.\n                        </Alert>\n                      </div>\n                    )}\n                  {[Phase.Phase3, Phase.Phase4, Phase.Lottery].includes(\n                    phase,\n                  ) &&\n                    fairLaunch.state.currentMedian &&\n                    fairLaunch?.ticket?.data?.amount &&\n                    !fairLaunch?.ticket?.data?.state.withdrawn &&\n                    fairLaunch.state.currentMedian.gt(\n                      fairLaunch?.ticket?.data?.amount,\n                    ) && (\n                      <div style={{ paddingTop: '15px' }}>\n                        <Alert severity=\"error\">\n                          Your bid wasn't the newest highest bid - you didn't\n                          win 66% of the treasurypot! Your bid was below the\n                          median bid and was not included in the lottery to win\n                          a chance of 33% of the pot.\n                        </Alert>\n                      </div>\n                    )}\n                  {notEnoughSOL && (\n                    <Alert severity=\"error\">\n                      You do not have enough SOL in your account to place this\n                      bid.\n                    </Alert>\n                  )}\n                </>\n              )}\n              {[Phase.Phase1, Phase.Phase2].includes(phase) && (\n                <>\n                  <Grid style={{ marginTop: 0, marginBottom: 0 }}>\n                    <ValueSlider\n                      min={max}\n                      marks={marks}\n                      max={max}\n                      step={step}\n                      value={contributed}\n                      onChange={(ev, val) => setContributed(val as any)}\n                      valueLabelDisplay=\"auto\"\n                      style={{\n                        display: \"none\",\n                        width: 'calc(100% - 40px)',\n                        marginLeft: 20,\n                        height: 30,\n                      }}\n                    />\n                  </Grid>\n                </>\n              )}\n              {!wallet.connected ? (\n                <ConnectButton>\n                  Connect{' '}\n                  {[Phase.Phase1].includes(phase) ? 'to bid' : 'to see status'}\n                </ConnectButton>\n              ) : (\n                <div>\n                  {[Phase.Phase1].includes(phase) && (\n                    <>\n                      <MintButton\n                        onClick={onDeposit}\n                        variant=\"contained\"\n                        disabled={\n                          isMinting ||\n                          (!fairLaunch?.ticket.data &&\n                            phase === Phase.Phase2) ||\n                          notEnoughSOL\n                        }\n                      >\n                        {isMinting ? (\n                          <CircularProgress />\n                        ) : !fairLaunch?.ticket.data ? (\n                          'Become Winner? ◎' + (highest + 0.0138).toPrecision(9).toString()\n                        ) : (\n                          'only new bids count :)'\n                        )}\n                        {}\n                      </MintButton>\n                    </>\n                  )}\n                  {!wallet.connected && (\n                <ConnectButton>\n                  Connect{' '}\n                  {[Phase.Phase1].includes(phase) ? 'to bid' : 'to see status'}\n                </ConnectButton>\n                )}\n{[Phase.Phase2].includes(phase) && (\n                    <>\n                      <MintButton\n                        onClick={onDeposit}\n                        variant=\"contained\"\n                        x\n                      >\n                        \n                          'Someone won! Press this button! (but only from a brand new wallet...)' \n                        {}\n                      </MintButton>\n                    </>\n                  )}\n                  {[Phase.Lottery, Phase.Phase3, Phase.Phase4].includes(\n                    phase,\n                  ) &&\n                    fairLaunch && (\n                      <>\n                        \n\n                        {isWinner(fairLaunch, fairLaunchBalance) && (\n                          <MintButton\n                            onClick={onPunchTicket}\n                            variant=\"contained\"\n                            disabled={\n                              fairLaunch?.ticket.data?.state.punched !==\n                              undefined\n                            }\n                          >\n                            {isMinting ? <CircularProgress /> : 'Punch Ticket'}\n                          </MintButton>\n                        )}\n                      </>\n                    )}\n\n                  {phase === Phase.Phase4 && (\n                    <>\n                      {(!fairLaunch ||\n                        isWinner(fairLaunch, fairLaunchBalance)) && (\n                        <MintContainer>\n                          <MintButton\n                            disabled={\n                              candyMachine?.state.isSoldOut ||\n                              isMinting ||\n                              !candyMachine?.state.isActive ||\n                              (fairLaunch?.ticket?.data?.state.punched &&\n                                fairLaunchBalance === 0)\n                            }\n                            onClick={onMint}\n                            variant=\"contained\"\n                          >\n                            {fairLaunch?.ticket?.data?.state.punched &&\n                            fairLaunchBalance === 0 ? (\n                              'MINTED'\n                            ) : candyMachine?.state.isSoldOut ? (\n                              'SOLD OUT'\n                            ) : isMinting ? (\n                              <CircularProgress />\n                            ) : (\n                              'MINT'\n                            )}\n                          </MintButton>\n                        </MintContainer>\n                      )}\n                    </>\n                  )}\n                </div>\n              )}\n              <Grid\n                container\n                justifyContent=\"space-between\"\n                color=\"textSecondary\"\n              >\n                {' '}\n              </Grid>\n              <Dialog\n                open={refundExplainerOpen}\n                onClose={() => setRefundExplainerOpen(false)}\n                PaperProps={{\n                  style: { backgroundColor: '#222933', borderRadius: 6 },\n                }}\n              >\n                <MuiDialogContent style={{ padding: 24 }}>\n                  During Fair3d Game phases, or if you are a winner, or if this\n                  website is not configured to be a fair launch but simply a\n                  candy machine, refunds are disallowed.\n                </MuiDialogContent>\n              </Dialog>\n              <Dialog\n                open={showOpen}\n                onClose={() => {\n                  setShowOpen(false);\n                }}\n                PaperProps={{\n                  style: { backgroundColor: '#222933', borderRadius: 6 },\n                }}\n              >\n                <MuiDialogContent style={{ padding: 24 }}>\n                  <div>\n                    <h1>gm :) Each of these games are separate, yet related. Remember to refresh,...</h1>\n                  </div>\n                </MuiDialogContent>\n              </Dialog>\n              <Dialog\n                open={howToOpen}\n                onClose={() => setHowToOpen(false)}\n                PaperProps={{\n                  style: { backgroundColor: '#222933', borderRadius: 6 },\n                }}\n              >\n                <MuiDialogTitle\n                  disableTypography\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                  }}\n                >\n                  <Link\n                    component=\"button\"\n                    variant=\"h6\"\n                    color=\"textSecondary\"\n                    onClick={() => {\n                      setHowToOpen(true);\n                    }}\n                  >\n                    How to win\n                  </Link>\n                  <IconButton\n                    aria-label=\"close\"\n                    className={dialogStyles.closeButton}\n                    onClick={() => setHowToOpen(false)}\n                  >\n                    <CloseIcon />\n                  </IconButton>\n                </MuiDialogTitle>\n                <MuiDialogContent>\n                  <Typography variant=\"h6\">Phase 1 - The Game:</Typography>\n                  <Typography gutterBottom color=\"textSecondary\">\n                    Every time someone new bids the price increases and the\n                    timer resets. Dev takes 1% of every bid, fuckboi takes 1%\n                    for putting up $, which doesn't get to see treasurypot. That\n                    new highest bidder becomes the Authority. Anyone at any\n                    phase can check the code on dunncreativess/fair3d, or run\n                    the show command on the cli. Metaplex team can assist you.\n                  </Typography>\n                  <Typography variant=\"h6\">Phase 2 - Grace period:</Typography>\n                  <Typography gutterBottom color=\"textSecondary\">\n                    You can optionally pay the median bid in order to qualify\n                    for a runner up ticket.\n                  </Typography>\n\n                  <Typography variant=\"h6\">Phase 3 - The Lottery:</Typography>\n                  <Typography gutterBottom color=\"textSecondary\">\n                    If you get a ticket, the Authority must conduct a lottery.\n                    The Metaplex team can assist the Authority. There are all\n                    bidders over half the highest bid, +1 for good luck :)\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    Phase 4 - The Candy Machine:\n                  </Typography>\n                  <Typography gutterBottom color=\"textSecondary\">\n                    Winners of lottery share 33% treasurypot when you punch your\n                    ticket. You also get an NFT. The Authority can punch\n                    everyones tickets for them. When withdrawing, the Authority\n                    gets what's left of the treasurypot - 66%.\n                  </Typography>\n\n                  <Typography variant=\"h6\">\n                    Tips? Strategy? Nash Tables?\n                  </Typography>\n                  <Typography gutterBottom color=\"textSecondary\">\n                    All in all it's not what @redacted_j had in mind. At all.{' '}\n                    <br />\n                    It's probably better to bid more sooner. More than once. If\n                    your goal is 1st prize (which it probably should be). You\n                    can now update your existing bids... By outpricing everyone\n                    else taking it seriously, you'd ensure the thing concludes\n                    before many other ppl out there know about it. That said,\n                    doing it from more than 1 address would increase your\n                    chances at getting either a winning ticket (which would get\n                    you a shiny Nft you'll be able to exchange for a new winning\n                    bid instead of sol in the next game) or a losing ticket\n                    (which you'll be able to exchange for a bid just over the\n                    median in the next game) You need to outgreed the consensus\n                    greed before the pool contributing to consensus includes\n                    greedier parties.\n                    <br /> Bidding more earlier from more addresses:\n                    <br /> 1. Ensures you'll probably priceout everyone easier\n                    than letting the 24hr timer nearly conclude over and over,\n                    as there will absolutely be more parties interested in\n                    pricing out everyone else as time elapses.\n                    <br /> 2. If your bids from any address are over the median\n                    by conclusion 2nd phase, they can punch to receive a ticket.\n                    This ticket gives you a chance at sharing the 2nd place\n                    prize pool.\n                    <br /> 3. Any ticket can be used in the next game instead of\n                    sol to enter a bid at median. These can then be manually\n                    increased incrementally to ensure another ticket, and chance\n                    at 2nd place prize, or maximally to become new highest\n                    bidder on that 2nd game - for a fraction of the cost in\n                    either case.\n                    <br /> 4. If your ticket wine that games draw, when punching\n                    you'll get an NFT from the candy machine. In the following\n                    game, winning nfts can be exchanged for a new top bid\n                    instead of paying sol.\n                    <br /> 5. Because the following game will absolutely have\n                    more interest than the previous games, the won nfts will\n                    always have more value than what it probably cost to acquire\n                    them. Losing tickets may have some value more or less...\n                    This depends entirely on when these things are redeemed.\n                    <br /> 6. Moreover either of these things can be traded on\n                    secondary.\n                    <br />\n                    <br /> In short: bidding more from more addresses as early\n                    as is feasible almost definitely ensures free bids, as well\n                    as significantly increasing chances at either pot.\n                    <br /> <br /> Not financial advice. Risk only what you can\n                    afford to lose.\n                    <br /> <br /> If you're among the subset of people that\n                    would rather see the timer almost expire then bid again -\n                    that's actually ok, too. The system needs you to thrive.\n                  </Typography>\n                </MuiDialogContent>\n              </Dialog>\n              {/* {wallet.connected && (\n              <p>\n                Address: {shortenAddress(wallet.publicKey?.toBase58() || '')}\n              </p>\n            )}\n\n            {wallet.connected && (\n              <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\n            )} */}\n            </Grid>\n          </Paper>\n        </Container>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n        <br />\n        \n      </Container>\n    </>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport default Home;\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.5),\n        marginRight: 0,\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: theme.spacing(1),\n      marginRight: 0,\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    }\n  }),\n);\n\n\ninterface PhaseCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n  start?: Date;\n  end?: Date;\n}\n\ninterface CountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const PhaseCountdown: React.FC<PhaseCountdownProps> = ({\n  date,\n  status,\n  style,\n  start,\n  end,\n  onComplete,\n}) => {\n  const classes = useStyles();\n\n  const [isFixed, setIsFixed] = useState(start && end && date ? start.getTime() - Date.now() < 0 : false);\n\n  const renderCountdown = ({ days, hours, minutes, seconds, completed }: CountdownRender) => {\n    hours += days * 24\n    if (completed) {\n      return status ? <span className={classes.done}  >{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style} >\n          {isFixed && <Paper elevation={0}>\n            <span className={classes.item}>\n              +\n            </span>\n          </Paper>}\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      )\n    }\n  }\n\n  if (date && start && end) {\n    if (isFixed) {\n      <Countdown\n        date={start}\n        now={() => end.getTime()}\n        onComplete={() => setIsFixed(false)}\n        renderer={renderCountdown}\n      />\n    }\n  }\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    )\n  } else {\n    return null\n  }\n}\n","import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport confetti from 'canvas-confetti';\n\nexport interface ConfettiContextState {\n  dropConfetti: () => void;\n}\n\nconst ConfettiContext = React.createContext<ConfettiContextState | null>(null);\n\nexport const ConfettiProvider = ({ children = null as any }) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<confetti.CreateTypes>();\n\n  const dropConfetti = useMemo(\n    () => () => {\n      if (confettiRef.current && canvasRef.current) {\n        canvasRef.current.style.visibility = 'visible';\n        confettiRef\n          .current({\n            particleCount: 400,\n            spread: 160,\n            origin: { y: 0.3 },\n          })\n          ?.finally(() => {\n            if (canvasRef.current) {\n              canvasRef.current.style.visibility = 'hidden';\n            }\n          });\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (canvasRef.current && !confettiRef.current) {\n      canvasRef.current.style.visibility = 'hidden';\n      confettiRef.current = confetti.create(canvasRef.current, {\n        resize: true,\n        useWorker: true,\n      });\n    }\n  }, []);\n\n  const canvasStyle: React.CSSProperties = {\n    width: '100vw',\n    height: '100vh',\n    position: 'absolute',\n    zIndex: 1,\n    top: 0,\n    left: 0,\n  };\n\n  return (\n    <ConfettiContext.Provider value={{ dropConfetti }}>\n      <canvas ref={canvasRef as any} style={canvasStyle} />\n      {children}\n    </ConfettiContext.Provider>\n  );\n};\n\nexport const Confetti = () => {\n  const { dropConfetti } = useConfetti();\n\n  useEffect(() => {\n    dropConfetti();\n  }, [dropConfetti]);\n\n  return <></>;\n};\n\nexport const useConfetti = () => {\n  const context = useContext(ConfettiContext);\n  return context as ConfettiContextState;\n};\n","import './App.css';\nimport { useMemo } from 'react';\n\nimport Home from './Home';\nimport Home2 from './Home2';\nimport Home3 from './Home3';\nimport Home4 from './Home4';\n\nimport * as anchor from '@project-serum/anchor';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\n\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { ThemeProvider, createTheme } from '@material-ui/core';\nimport { ConfettiProvider } from './confetti';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst candyMachineId = process.env.REACT_APP_CANDY_MACHINE_ID\n  ? new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID)\n  : undefined;\n\nconst fairLaunchId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID!,\n);\n\nconst fairLaunchId2 = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID2!,\n);\nconst fairLaunchId3 = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID3!,\n);\nconst fairLaunchId4 = new anchor.web3.PublicKey(\n  process.env.REACT_APP_FAIR_LAUNCH_ID4!,\n);\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <div\n              className=\"container-div\"\n              style={{ margin: 0, alignItems: 'center' }}\n            >\n              <div style={{ display: 'inline' }}>\n                <div style={{ textAlign: 'center' }}>Team 1</div>\n                <ConfettiProvider>\n                  <Home\n                    candyMachineId={candyMachineId}\n                    fairLaunchId={fairLaunchId}\n                    connection={connection}\n                    startDate={startDateSeed}\n                    txTimeout={txTimeout}\n                  />\n                </ConfettiProvider>\n              </div>\n              <div style={{ display: 'inline' }}>\n                <div style={{ textAlign: 'center' }}>Team 2</div>\n                <ConfettiProvider>\n                  <Home\n                    candyMachineId={candyMachineId}\n                    fairLaunchId={fairLaunchId2}\n                    connection={connection}\n                    startDate={startDateSeed}\n                    txTimeout={txTimeout}\n                  />\n                </ConfettiProvider>\n              </div>\n            </div>\n            <div\n              className=\"container-div\"\n              style={{ margin: 0, alignItems: 'center' }}\n            >\n              <div style={{ display: 'inline' }}>\n                <div style={{ textAlign: 'center' }}>Team 3</div>\n                <ConfettiProvider>\n                  <Home\n                    candyMachineId={candyMachineId}\n                    fairLaunchId={fairLaunchId3}\n                    connection={connection}\n                    startDate={startDateSeed}\n                    txTimeout={txTimeout}\n                  />\n                </ConfettiProvider>\n              </div>\n              <div style={{ display: 'inline' }}>\n                <div style={{ textAlign: 'center' }}>Team 4</div>\n                <ConfettiProvider>\n                  <Home\n                    candyMachineId={candyMachineId}\n                    fairLaunchId={fairLaunchId4}\n                    connection={connection}\n                    startDate={startDateSeed}\n                    txTimeout={txTimeout}\n                  />\n                </ConfettiProvider>\n              </div>\n            </div>\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App2 from './App2';\nimport App3 from './App3';\nimport App4 from './App4';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}